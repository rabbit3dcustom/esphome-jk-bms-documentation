title: YAMBMS monitor
views:
  - title: WHOLE SYSTEM
    path: default_view
    badges: []
    cards:
      - type: vertical-stack
        cards:
          - type: custom:stack-in-card
            keep:
              margin: false
              box_shadow: false
              background: false
            cards:
              - type: grid
                square: false
                columns: 1
                cards:
                  - type: markdown
                    content: >-

                      {%- set total_bms = namespace(value=0) %} {%- set
                      total_online_bms = namespace(value=0) %} {% for idx in
                      range(0, 16)-%} 
                        {% if states('binary_sensor.yambms_jk_bms_%d_status_online' % idx)=='on' or states('binary_sensor.rs485_bms%d_status_online' % idx)=='off' %}
                         {% set total_bms.value = total_bms.value +1 %}
                         {% if states('binary_sensor.yambms_jk_bms_%d_status_online' % idx)=='on' %}
                            {% set total_online_bms.value = total_online_bms.value +1 %}
                         {% endif %}
                        {%- endif %}
                         
                      {% endfor %} <CENTER><b><font size=5>ONLINE BMSs:</B>
                      {{total_online_bms.value}}/{{total_bms.value}}</font></CENTER>
              - type: gauge
                name: SOC (Smart Shunt)
                entity: sensor.victron_system_battery_soc_2
                needle: true
                max: 100
                min: 0
                segments:
                  - from: 0
                    color: '#db4437'
                  - from: 5
                    color: '#ffa600'
                  - from: 25
                    color: '#43a047'
              - type: grid
                square: false
                columns: 1
                cards:
                  - type: markdown
                    content: >-
                      {%- set power_draw =
                      states('sensor.yambms_jk_bms_1_battery_power')|float +
                      states('sensor.yambms_jk_bms_2_battery_power')|float %} 
                      {%- set power_charging =
                      states('sensor.yambms_jk_bms_1_battery_power_charging')|float
                      +
                      states('sensor.yambms_jk_bms_2_battery_power_charging')|float
                      %}  {%- set power_discharging =
                      states('sensor.yambms_jk_bms_1_battery_power_discharging')|float
                      +
                      states('sensor.yambms_jk_bms_2_battery_power_discharging')|float
                      %} 

                      {%- set power_label = "(charging)" if (power_charging)>0 
                            else "(discharging)" if (power_discharging)>0 
                            else "" %} 

                      {%- set power_value = power_charging if
                      (power_charging)>0 
                            else power_discharging if (power_discharging)>0 
                            else power_draw %} 

                      {%- set font_start = '<b><font color=#41CD52 size=6>' if
                      (power_charging)>0 
                            else '<b><font color=#3090C7 size=6>' if (power_discharging)>0 
                            else '<b><font color=#aaaaaa size=6>' %}      
                            
                      {%- set font_end = '</font></b>' if (power_charging)>0 or
                      (power_discharging)>0 else '' %} 

                      <center>{{font_start}}{{ "%.3f" % power_value }}W
                      {{power_label}}{{font_end}}</center>  

                      {% macro pad_right(w, s) %} {{ s }} {% set slen =  w -
                      (s|length) %} 
                        {% for idx in range(slen)%} &nbsp; {%endfor %}
                      {%- endmacro %} 

                      {% macro green(s) %} <font color=#41CD52 size=2
                      family=Consolas> {{ s }} </font> {%- endmacro %}
                      <div>         
              - type: grid
                square: false
                columns: 2
                cards:
                  - type: markdown
                    content: >-
                      {%- set total_voltage =
                      (states('sensor.yambms_jk_bms_1_battery_voltage')|float +
                      states('sensor.yambms_jk_bms_2_battery_voltage')|float)/2
                      %}

                      <center><b><font color=#41CD52 size=6>{{"%.3f" %
                      total_voltage}}V</font></b><br> </center>   {% macro
                      pad_right(w, s) %} {{ s }} {% set slen =  w - (s|length)
                      %} 
                        {% for idx in range(slen)%} &nbsp; {%endfor %}
                      {%- endmacro %} 

                      {% macro green(s) %} <font color=#41CD52 size=2
                      family=Consolas> {{ s }} </font> {%- endmacro %}
                      <div>          
                  - type: markdown
                    content: >-
                      {%- set total_current =
                      (states('sensor.yambms_jk_bms_1_battery_current')|float)+(states('sensor.yambms_jk_bms_2_battery_current')|float)
                      %}
                                  
                      <center><b><font color=#41CD52 size=6>{{"%.3f" %
                      total_current}}A</font></b><br> </center> {% macro
                      pad_right(w, s) %}  {{ s }} {% set slen =  w - (s|length)
                      %} {% for idx in range(slen)%} &nbsp; {%endfor %} {%-
                      endmacro %} {% macro green(s) %} <font color=#41CD52
                      family=Consolas> {{ s }} </font> {%- endmacro %}
      - type: vertical-stack
        cards:
          - type: custom:stack-in-card
            keep:
              margin: false
              box_shadow: false
              background: false
            cards:
              - type: grid
                square: false
                columns: 1
                cards:
                  - type: markdown
                    content: <CENTER><b><font size=5>BMS 01</font></b></CENTER>
                    style: |
                      ha-card {
                        height: 10px;  /* Ajusta el valor segÃºn tu preferencia */
                        overflow: hidden;
                      }
              - type: gauge
                name: SOC
                entity: sensor.yambms_jk_bms_1_battery_capacity_state_of_charge
                needle: true
                max: 100
                min: 0
                segments:
                  - from: 0
                    color: '#db4437'
                  - from: 5
                    color: '#ffa600'
                  - from: 25
                    color: '#43a047'
              - type: grid
                square: false
                columns: 1
                cards:
                  - type: markdown
                    content: >-
                      {%- set power_draw =
                      states('sensor.yambms_jk_bms_1_battery_power')|float %} 
                      {%- set power_charging =
                      states('sensor.yambms_jk_bms_1_battery_power_charging')|float
                      %}  {%- set power_discharging =
                      states('sensor.yambms_jk_bms_1_battery_power_discharging')|float 
                      %} 

                      {%- set power_label = "(charging)" if (power_charging)>0 
                            else "(discharging)" if (power_discharging)>0 
                            else "" %} 

                      {%- set power_value = power_charging if
                      (power_charging)>0 
                            else power_discharging if (power_discharging)>0 
                            else power_draw %} 

                      {%- set font_start = '<b><font color=#41CD52 size=6>' if
                      (power_charging)>0 
                            else '<b><font color=#3090C7 size=6>' if (power_discharging)>0 
                            else '<b><font color=#aaaaaa size=6>' %}      
                            
                      {%- set font_end = '</font></b>' if (power_charging)>0 or
                      (power_discharging)>0 else '' %} 

                      <center>{{font_start}}{{ "%.3f" % power_value }}W
                      {{power_label}}{{font_end}}</center>  

                      {% macro pad_right(w, s) %} {{ s }} {% set slen =  w -
                      (s|length) %} 
                        {% for idx in range(slen)%} &nbsp; {%endfor %}
                      {%- endmacro %} 

                      {% macro green(s) %} <font color=#41CD52 size=2
                      family=Consolas> {{ s }} </font> {%- endmacro %}
                      <div>         
              - type: grid
                square: false
                columns: 2
                cards:
                  - type: markdown
                    content: >-
                      {%- set total_voltage =
                      (states('sensor.yambms_jk_bms_1_battery_voltage')|float)
                      %}

                      <center><b><font color=#41CD52 size=6>{{"%.3f" %
                      total_voltage}}V</font></b><br> </center>   {% macro
                      pad_right(w, s) %} {{ s }} {% set slen =  w - (s|length)
                      %} 
                        {% for idx in range(slen)%} &nbsp; {%endfor %}
                      {%- endmacro %} 

                      {% macro green(s) %} <font color=#41CD52 size=2
                      family=Consolas> {{ s }} </font> {%- endmacro %}
                      <div>          
                  - type: markdown
                    content: >-
                      {%- set total_current =
                      (states('sensor.yambms_jk_bms_1_battery_current')|float)
                      %}
                                  
                      <center><b><font color=#41CD52 size=6>{{"%.3f" %
                      total_current}}A</font></b><br> </center> {% macro
                      pad_right(w, s) %}  {{ s }} {% set slen =  w - (s|length)
                      %} {% for idx in range(slen)%} &nbsp; {%endfor %} {%-
                      endmacro %} {% macro green(s) %} <font color=#41CD52
                      family=Consolas> {{ s }} </font> {%- endmacro %}
              - type: grid
                square: false
                columns: 2
                cards:
                  - type: markdown
                    content: >-
                      {% macro pad_right(w, s) %}  {{ s }} {% set slen =  w -
                      (s|length) %} {% for idx in range(slen)%} &nbsp; {%endfor
                      %} {%- endmacro %} {% macro green(s) %} <font
                      color=#41CD52 family=Consolas> {{ s }} </font> {%-
                      endmacro %} <div>    {{ pad_right(14, 'MOS  Temp.:') }} 
                      {{
                      green(states('sensor.yambms_jk_bms_1_temperature_powertube')
                      + ' Â°C') }} <br>  {{ pad_right(15, 'Battery T1:') }}  {{
                      green(states('sensor.yambms_jk_bms_1_temperature_sensor_1')
                      +  ' Â°C') }} <br>  {{ pad_right(15, 'Battery T2:') }}  {{
                      green(states('sensor.yambms_jk_bms_1_temperature_sensor_2')
                      +  ' Â°C') }} <br>  {{ pad_right(15, 'Battery T3:') }}  {{
                      green(states('sensor.yambms_jk_bms_1_temperature_sensor_3')
                      +  ' Â°C') }}<br>  {{ pad_right(15, 'Battery T4:') }}  {{
                      green(states('sensor.yambms_jk_bms_1_temperature_sensor_4')
                      +  ' Â°C') }}           <br>  {{ pad_right(15, 'Battery
                      T5:') }}  {{
                      green(states('sensor.yambms_jk_bms_1_temperature_sensor_5')
                      +  ' Â°C') }}</div><br>

                      <div> {%- set alarm_active =
                      states('sensor.yambms_jk_bms_1_battery_total_alarms_active')|int
                      %} {%- set alarm_active = 0 %}                
                        {%- set alarm_count = states('sensor.yambms_jk_bms_1_battery_total_alarms_count')|int %}
                        {%- set alarm_label = '<font size=2>ALARMS</font>' if alarm_active==0
                            else '<b><font size=5 color=red>ALARMS</font></b>' %}
                        {{alarm_label}} ({{ alarm_active }}/{{ alarm_count -}})
                  - type: markdown
                    content: >-
                      {%- set soh =
                        states('sensor.yambms_jk_bms_1_battery_soh_valuation') %}   {%- set
                      max_idx =
                      states('sensor.yambms_jk_bms_1_cell_voltage_max_cell_number')
                      %} {%- set min_idx =
                      states('sensor.yambms_jk_bms_1_cell_voltage_min_cell_number')
                      %}   {%- set max_idx =
                      states('sensor.yambms_jk_bms_1_cell_voltage_max_cell_number')
                      %}    {%- set min_idxr =
                      states('sensor.yambms_jk_bms_1_cell_resistance_min_cell_number')
                      %}   {%- set max_idxr =
                      states('sensor.yambms_jk_bms_1_cell_resistance_max_cell_number')
                      %}                  {%- set delta_voltage =
                      (states('sensor.yambms_jk_bms_1_cell_delta_voltage')|float)
                      %} {%- set average_voltage =
                        (states('sensor.yambms_jk_bms_1_cell_average_voltage')|float) %}   {%-
                      set max_voltage =
                      (states('sensor.yambms_jk_bms_1_cell_voltage_max')|float)
                      %}    {%- set min_voltage =
                      (states('sensor.yambms_jk_bms_1_cell_voltage_min')|float)
                      %}              {%- set max_resistance =
                      (states('sensor.yambms_jk_bms_1_cell_resistance_max')|float)
                      %}  {%- set min_resistance =
                      (states('sensor.yambms_jk_bms_1_cell_resistance_min')|float)
                      %}            <table>  

                        <tr><td><b>SOH:</b></td><td width=125px>{{soh}} %</td></tr>              
                        <tr><td><b>delta:</b></td><td width=125px>{{delta_voltage}} V</td></tr>              
                        <tr><td>avg:</b></td><td width=125px>{{average_voltage}} V</td></tr>                              
                        <tr><td>Vmax:</td><td width=125px>{{max_voltage}} V [cell {{max_idx}}] </td></tr>
                        <tr><td>Vmin:</td><td width=125px>{{min_voltage}} V [cell {{min_idx}}] </td></tr>                
                        <tr><td>Rmax:</td><td width=125px>{{max_resistance}} Î© [cell {{max_idxr}}]</td></tr>
                        <tr><td>Rmin:</td><td width=125px>{{min_resistance}} Î© [cell {{min_idxr}}]</td></tr>
                      </table>
      - type: vertical-stack
        cards:
          - type: custom:stack-in-card
            keep:
              margin: false
              box_shadow: false
              background: false
            cards:
              - type: grid
                square: false
                columns: 1
                cards:
                  - type: markdown
                    content: <CENTER><b><font size=5>BMS 02</font></b></CENTER>
                    style: |
                      ha-card {
                        height: 10px;  /* Ajusta el valor segÃºn tu preferencia */
                        overflow: hidden;
                      }
              - type: gauge
                name: SOC
                entity: sensor.yambms_jk_bms_2_battery_capacity_state_of_charge
                needle: true
                max: 100
                min: 0
                segments:
                  - from: 0
                    color: '#db4437'
                  - from: 5
                    color: '#ffa600'
                  - from: 25
                    color: '#43a047'
              - type: grid
                square: false
                columns: 1
                cards:
                  - type: markdown
                    content: >-
                      {%- set power_draw =
                      states('sensor.yambms_jk_bms_2_battery_power')|float %} 
                      {%- set power_charging =
                      states('sensor.yambms_jk_bms_2_battery_power_charging')|float
                      %}  {%- set power_discharging =
                      states('sensor.yambms_jk_bms_2_battery_power_discharging')|float 
                      %} 

                      {%- set power_label = "(charging)" if (power_charging)>0 
                            else "(discharging)" if (power_discharging)>0 
                            else "" %} 

                      {%- set power_value = power_charging if
                      (power_charging)>0 
                            else power_discharging if (power_discharging)>0 
                            else power_draw %} 

                      {%- set font_start = '<b><font color=#41CD52 size=6>' if
                      (power_charging)>0 
                            else '<b><font color=#3090C7 size=6>' if (power_discharging)>0 
                            else '<b><font color=#aaaaaa size=6>' %}      
                            
                      {%- set font_end = '</font></b>' if (power_charging)>0 or
                      (power_discharging)>0 else '' %} 

                      <center>{{font_start}}{{ "%.3f" % power_value }}W
                      {{power_label}}{{font_end}}</center>  

                      {% macro pad_right(w, s) %} {{ s }} {% set slen =  w -
                      (s|length) %} 
                        {% for idx in range(slen)%} &nbsp; {%endfor %}
                      {%- endmacro %} 

                      {% macro green(s) %} <font color=#41CD52 size=2
                      family=Consolas> {{ s }} </font> {%- endmacro %}
                      <div>         
              - type: grid
                square: false
                columns: 2
                cards:
                  - type: markdown
                    content: >-
                      {%- set total_voltage =
                      (states('sensor.yambms_jk_bms_2_battery_voltage')|float)
                      %}

                      <center><b><font color=#41CD52 size=6>{{"%.3f" %
                      total_voltage}}V</font></b><br> </center>   {% macro
                      pad_right(w, s) %} {{ s }} {% set slen =  w - (s|length)
                      %} 
                        {% for idx in range(slen)%} &nbsp; {%endfor %}
                      {%- endmacro %} 

                      {% macro green(s) %} <font color=#41CD52 size=2
                      family=Consolas> {{ s }} </font> {%- endmacro %}
                      <div>          
                  - type: markdown
                    content: >-
                      {%- set total_current =
                      (states('sensor.yambms_jk_bms_2_battery_current')|float)
                      %}
                                  
                      <center><b><font color=#41CD52 size=6>{{"%.3f" %
                      total_current}}A</font></b><br> </center> {% macro
                      pad_right(w, s) %}  {{ s }} {% set slen =  w - (s|length)
                      %} {% for idx in range(slen)%} &nbsp; {%endfor %} {%-
                      endmacro %} {% macro green(s) %} <font color=#41CD52
                      family=Consolas> {{ s }} </font> {%- endmacro %}
              - type: grid
                square: false
                columns: 2
                cards:
                  - type: markdown
                    content: >-
                      {% macro pad_right(w, s) %}  {{ s }} {% set slen =  w -
                      (s|length) %} {% for idx in range(slen)%} &nbsp; {%endfor
                      %} {%- endmacro %} {% macro green(s) %} <font
                      color=#41CD52 family=Consolas> {{ s }} </font> {%-
                      endmacro %} <div>    {{ pad_right(14, 'MOS  Temp.:') }} 
                      {{
                      green(states('sensor.yambms_jk_bms_2_temperature_powertube')
                      + ' Â°C') }} <br>  {{ pad_right(15, 'Battery T1:') }}  {{
                      green(states('sensor.yambms_jk_bms_2_temperature_sensor_1')
                      +  ' Â°C') }} <br>  {{ pad_right(15, 'Battery T2:') }}  {{
                      green(states('sensor.yambms_jk_bms_2_temperature_sensor_2')
                      +  ' Â°C') }} <br>  {{ pad_right(15, 'Battery T3:') }}  {{
                      green(states('sensor.yambms_jk_bms_2_temperature_sensor_3')
                      +  ' Â°C') }}<br>  {{ pad_right(15, 'Battery T4:') }}  {{
                      green(states('sensor.yambms_jk_bms_2_temperature_sensor_4')
                      +  ' Â°C') }}           <br>  {{ pad_right(15, 'Battery
                      T5:') }}  {{
                      green(states('sensor.yambms_jk_bms_2_temperature_sensor_5')
                      +  ' Â°C') }}</div><br>

                      <div> {%- set alarm_active =
                      states('sensor.yambms_jk_bms_2_battery_total_alarms_active')|int
                      %} {%- set alarm_active = 0 %}                
                        {%- set alarm_count = states('sensor.yambms_jk_bms_2_battery_total_alarms_count')|int %}
                        {%- set alarm_label = '<font size=2>ALARMS</font>' if alarm_active==0
                            else '<b><font size=5 color=red>ALARMS</font></b>' %}
                        {{alarm_label}} ({{ alarm_active }}/{{ alarm_count -}})
                  - type: markdown
                    content: >-
                      {%- set soh =
                        states('sensor.yambms_jk_bms_2_battery_soh_valuation') %}   {%- set
                      max_idx =
                      states('sensor.yambms_jk_bms_2_cell_voltage_max_cell_number')
                      %} {%- set min_idx =
                      states('sensor.yambms_jk_bms_2_cell_voltage_min_cell_number')
                      %}   {%- set max_idx =
                      states('sensor.yambms_jk_bms_2_cell_voltage_max_cell_number')
                      %}    {%- set min_idxr =
                      states('sensor.yambms_jk_bms_2_cell_resistance_min_cell_number')
                      %}   {%- set max_idxr =
                      states('sensor.yambms_jk_bms_2_cell_resistance_max_cell_number')
                      %}                  {%- set delta_voltage =
                      (states('sensor.yambms_jk_bms_2_cell_delta_voltage')|float)
                      %} {%- set average_voltage =
                        (states('sensor.yambms_jk_bms_2_cell_average_voltage')|float) %}   {%-
                      set max_voltage =
                      (states('sensor.yambms_jk_bms_2_cell_voltage_max')|float)
                      %}    {%- set min_voltage =
                      (states('sensor.yambms_jk_bms_2_cell_voltage_min')|float)
                      %}              {%- set max_resistance =
                      (states('sensor.yambms_jk_bms_2_cell_resistance_max')|float)
                      %}  {%- set min_resistance =
                      (states('sensor.yambms_jk_bms_2_cell_resistance_min')|float)
                      %}            <table>  

                        <tr><td><b>SOH:</b></td><td width=125px>{{soh}} %</td></tr>              
                        <tr><td><b>delta:</b></td><td width=125px>{{delta_voltage}} V</td></tr>              
                        <tr><td>avg:</b></td><td width=125px>{{average_voltage}} V</td></tr>                              
                        <tr><td>Vmax:</td><td width=125px>{{max_voltage}} V [cell {{max_idx}}] </td></tr>
                        <tr><td>Vmin:</td><td width=125px>{{min_voltage}} V [cell {{min_idx}}] </td></tr>                
                        <tr><td>Rmax:</td><td width=125px>{{max_resistance}} Î© [cell {{max_idxr}}]</td></tr>
                        <tr><td>Rmin:</td><td width=125px>{{min_resistance}} Î© [cell {{min_idxr}}]</td></tr>
                      </table>
      - graph: line
        type: sensor
        detail: 2
        entity: sensor.victron_system_bus_charge_power
        unit: W
      - type: entities
        entities:
          - entity: sensor.yambms_smart_bms_1_charging_instruction
            name: Instruction
          - entity: sensor.yambms_smart_bms_1_charging_status
            name: Status
          - entity: sensor.yambms_smart_bms_1_capacity_remaining_s
            name: Remaining
          - entity: sensor.yambms_smart_bms_1_battery_capacity_s
            name: Battery Capacity (Î£)
          - entity: sensor.yambms_smart_bms_1_charging_cycles_o
            name: Cycles
          - entity: sensor.yambms_smart_bms_1_current_s
            name: Current
          - entity: sensor.yambms_smart_bms_1_power_s
            name: Power
          - entity: sensor.yambms_smart_bms_1_total_voltage_o
            name: Voltage
          - entity: sensor.yambms_smart_bms_1_requested_charge_voltage
            name: RCV
          - entity: number.yambms_smart_bms_1_float_voltage
            secondary_info: none
            name: RFV
          - entity: switch.yambms_jk_pb_rs485_sniffer_broadcast_changes_to_all_bms
        state_color: false
      - type: entities
        entities:
          - entity: button.yambms_esp32_restart
          - entity: sensor.yambms_smart_bms_1_battery_capacity_s
          - entity: sensor.yambms_smart_bms_1_capacity_remaining_s
          - entity: sensor.yambms_smart_bms_1_cell_count
          - entity: sensor.yambms_smart_bms_1_cell_ovp_min
          - entity: sensor.yambms_smart_bms_1_cell_ovpr_min
          - entity: sensor.yambms_smart_bms_1_cell_uvpr_max
          - entity: sensor.yambms_smart_bms_1_charging_cycles_o
          - entity: sensor.yambms_smart_bms_1_charging_instruction
          - entity: sensor.yambms_smart_bms_1_charging_status
          - entity: sensor.yambms_smart_bms_1_current_s
          - entity: sensor.yambms_smart_bms_1_max_cell_voltage
          - entity: sensor.yambms_smart_bms_1_max_charge_current_s
          - entity: sensor.yambms_smart_bms_1_max_discharge_current_s
          - entity: sensor.yambms_smart_bms_1_max_voltage_cell
          - entity: sensor.yambms_smart_bms_1_min_cell_voltage
          - entity: sensor.yambms_smart_bms_1_min_voltage_cell
          - entity: sensor.yambms_smart_bms_1_power_s
          - entity: sensor.yambms_smart_bms_1_total_voltage_o
          - entity: sensor.yambms_smart_bms_1_warning
        title: SMART BMS STATUS
      - type: entities
        entities:
          - entity: binary_sensor.yambms_canbus_1_status
            name: CANBUS 1 Status
          - entity: binary_sensor.yambms_esp32_online_status
            name: ESP32 Online Status
          - entity: binary_sensor.yambms_jk_bms_1_status_online
            name: JK-BMS 1 status online
          - entity: binary_sensor.yambms_jk_bms_2_status_online
            name: JK-BMS 2 status online
          - entity: sensor.yambms_smart_bms_1_alarm
            name: Smart BMS 1 Alarm
          - entity: sensor.yambms_smart_bms_1_last_complete_charge
            name: Smart BMS 1 Last Complete Charge
          - entity: sensor.yambms_smart_bms_1_warning
            name: Smart BMS 1 Warning
          - entity: sensor.yambms_esp32_uptime
        title: Esp32-S3
      - type: custom:digital-clock
      - type: entities
        entities:
          - entity: sensor.victron_system_bus_charge_current
          - entity: sensor.victron_system_bus_charge_power
          - entity: sensor.victron_system_grid_l1
          - entity: sensor.victron_battery_timetogo
          - entity: sensor.victron_system_battery_soc
      - type: entities
        entities:
          - entity: sensor.myups_carga
            name: Carga
          - entity: sensor.myups_carga_de_la_bateria
            name: Carga de la baterÃ­a
          - entity: sensor.myups_datos_de_estado
            name: Datos de estado
          - entity: sensor.myups_estado
            name: Estado
          - sensor.myups_tension_de_entrada
          - entity: sensor.myups_tension_de_salida
            name: TensiÃ³n de salida
        title: Myups
      - show_name: true
        show_icon: true
        type: button
        tap_action:
          action: toggle
        entity: switch.aerotermia_master_modbus_switch_2
      - type: entities
        entities:
          - entity: sensor.aerotermia_outdoor_temperature_modbus_sensor_ok_2
  - title: BMS Summary
    path: bmss-summary
    badges: []
    cards:
      - type: vertical-stack
        cards:
          - type: custom:stack-in-card
            keep:
              margin: false
              box_shadow: false
              background: false
            cards:
              - type: grid
                square: false
                columns: 1
                cards:
                  - type: markdown
                    content: >-
                      <center><font color=#3090C7 size=4>BMS_01 [{{
                      states('sensor.yambms_jk_bms_1_total_runtime_formatted') |
                      string }}]&nbsp;&nbsp;{{
                      (states('sensor.yambms_jk_bms_1_battery_capacity_state_of_charge')
                      + ' %') }}   ({{
                        (states('sensor.yambms_jk_bms_1_battery_capacity_remaining')) }}Ah)
                      </center>
              - type: grid
                square: false
                columns: 2
                cards:
                  - type: markdown
                    content: >-
                      {%- set online =
                      states('binary_sensor.yambms_jk_bms_1_status_online')
                      %}                      

                      {%- set is_working = "online" if (online|bool) else
                      "offline" %} 

                      {%- set font_start = '<b><font size=2 color="#41CD52">' if
                      (online|bool) else '<b><font size=2 color=red>' %} 

                      {%- set font_end = '</font></b>' if is_working else
                      '</font></b>' %} 

                      {{ font_start }} {{ "BMS:"}} {{ is_working }} {{font_end
                      -}}


                      {%- set precharging =
                      states('binary_sensor.yambms_jk_bms_1_status_precharging')
                      %}                      

                      {%- set is_working = "working" if (precharging|bool) else
                      "idle" %} 

                      {%- set font_start = '<b><font size=2 color="#41CD52">' if
                      (precharging|bool) else '<font size=2>' %} 

                      {%- set font_end = '</font></b>' if is_working else
                      '</font>' %} 

                      {{ font_start }} {{ "Precharging:"}} {{ is_working }}
                      {{font_end -}}


                      {%- set heating =
                      states('binary_sensor.yambms_jk_bms_1_status_heating')
                      %}                      

                      {%- set is_working = "working" if (heating|bool) else
                      "idle" %} 

                      {%- set font_start = '<b><font size=2 color="#41CD52">' if
                      (heating|bool) else '<font size=2>' %} 

                      {%- set font_end = '</font></b>' if is_working else
                      '</fontZ' %} 

                      {{ font_start }} {{ "Heating:"}} {{ is_working }}
                      {{font_end -}}
                  - type: markdown
                    content: >-
                      {%- set charging =
                      states('binary_sensor.yambms_jk_bms_1_status_charging')
                      %}                         

                      {%- set is_working = "working" if (charging|bool) else
                      "idle" %} 

                      {%- set font_start = '<b><font size=2 color="#41CD52">' if
                      (charging|bool) else '<font size=2>' %} 

                      {%- set font_end = '</font></b>' if is_working else
                      '</font>' %} 

                      {{ font_start }} {{ "Charging:"}} {{ is_working }} {{
                      font_end -}}


                      {%- set discharging =
                      states('binary_sensor.yambms_jk_bms_1_status_discharging')
                      %}                         

                      {%- set is_working = "working" if (discharging|bool) else
                      "idle" %} 

                      {%- set font_start = '<b><font size=2 color="#41CD52">' if
                      (discharging|bool) else '<font size=2>' %} 

                      {%- set font_end = '</font></b>' if is_working else
                      '</font>' %} 

                      {{ font_start }} {{ "Discharging:"}} {{ is_working }} {{
                      font_end -}}
                        
                      {%- set balancing_direction =
                      states('sensor.yambms_jk_bms_1_balancing_direction')%}  
                      {%- set is_working = "charging" if
                      (balancing_direction|int)==1 
                            else "discharging" if (balancing_direction|int)==2 
                            else "idle" if (balancing_direction|int)==0
                            else 'unknown' %} 
                      {%- set font_start = '<b><font size=2 color="#41CD52">' if
                      (balancing_direction|int)>0 
                            else '<b><font size=2 color=#3090C7>' if (balancing_direction|int)<0 
                            else '<font size=2>' %}                             
                      {%- set font_end = '</font></b>' if
                      (balancing_direction|int)!=0 else '</font>' %}  {{
                      font_start }} {{ "<br>Balancing:"}} {{ is_working }}
                      {{font_end -}}
          - type: custom:stack-in-card
            keep:
              margin: false
              box_shadow: false
              background: false
            cards:
              - type: grid
                square: false
                columns: 1
                cards:
                  - type: markdown
                    content: >-
                      {%- set power_draw =
                      states('sensor.yambms_jk_bms_1_battery_power')|float %} 
                      {%- set power_charging =
                      states('sensor.yambms_jk_bms_1_battery_power_charging')|float
                      %}  {%- set power_discharging =
                      states('sensor.yambms_jk_bms_1_battery_power_discharging')|float
                      %} 

                      {%- set power_label = "(charging)" if (power_charging)>0 
                            else "(discharging)" if (power_discharging)>0 
                            else "" %} 

                      {%- set power_value = power_charging if
                      (power_charging)>0 
                            else power_discharging if (power_discharging)>0 
                            else power_draw %} 

                      {%- set font_start = '<b><font color=#41CD52 size=6>' if
                      (power_charging)>0 
                            else '<b><font color=#3090C7 size=6>' if (power_discharging)>0 
                            else '<b><font color=#aaaaaa size=6>' %}      
                            
                      {%- set font_end = '</font></b>' if (power_charging)>0 or
                      (power_discharging)>0 else '' %} 

                      <center>{{font_start}}{{ power_value }}W
                      {{power_label}}{{font_end}}</center>  

                      {% macro pad_right(w, s) %} {{ s }} {% set slen =  w -
                      (s|length) %} 
                        {% for idx in range(slen)%} &nbsp; {%endfor %}
                      {%- endmacro %} 

                      {% macro green(s) %} <font color=#41CD52 size=2
                      family=Consolas> {{ s }} </font> {%- endmacro %}
                      <div>         
              - type: grid
                square: false
                columns: 2
                cards:
                  - type: markdown
                    content: >-
                      <center><b><font color=#41CD52
                      size=6>{{states('sensor.yambms_jk_bms_1_battery_voltage')
                      }}V</font></b><br> </center>   {% macro pad_right(w, s) %}
                      {{ s }} {% set slen =  w - (s|length) %} 
                        {% for idx in range(slen)%} &nbsp; {%endfor %}
                      {%- endmacro %} 

                      {% macro green(s) %} <font color=#41CD52 size=2
                      family=Consolas> {{ s }} </font> {%- endmacro %}
                      <div>          
                  - type: markdown
                    content: >-
                      <center><b><font color=#41CD52 size=6>{{
                      states('sensor.yambms_jk_bms_1_battery_current') }}
                      A</font></b><br> </center> {% macro pad_right(w, s) %}  {{
                      s }} {% set slen =  w - (s|length) %} {% for idx in
                      range(slen)%} &nbsp; {%endfor %} {%- endmacro %} {% macro
                      green(s) %} <font color=#41CD52 family=Consolas> {{ s }}
                      </font> {%- endmacro %}
          - type: custom:stack-in-card
            keep:
              margin: false
              box_shadow: false
              background: false
            cards:
              - type: grid
                square: false
                columns: 2
                cards:
                  - type: markdown
                    content: >-
                      <div> {%- set ovp =
                      states('number.yambms_jk_bms_1_cell_overvoltage_protection')
                      %}  {%- set slv =
                      states('number.yambms_jk_bms_1_cell_smart_sleep_voltage')
                      %}  {%- set rcv =
                      states('number.yambms_jk_bms_1_cell_request_charge_voltage')
                      %}  {%- set bsv =
                      states('number.yambms_jk_bms_1_cell_balancing_starting_voltage')
                      %}  {%- set soc100 =
                      states('number.yambms_jk_bms_1_cell_soc100_voltage') %} 
                      {%- set ovpr =
                      states('number.yambms_jk_bms_1_cell_overvoltage_protection_recovery')
                      %}  {%- set rfv =
                      states('number.yambms_jk_bms_1_cell_request_float_voltage')
                      %}  {%- set uvpr =
                      states('number.yambms_jk_bms_1_cell_undervoltage_protection_recovery')
                      %}  {%- set soc0 =
                      states('number.yambms_jk_bms_1_cell_soc0_voltage') %}  {%-
                      set uvp =
                      states('number.yambms_jk_bms_1_cell_undervoltage_protection')
                      %}  {%- set poff =
                      states('number.yambms_jk_bms_1_cell_power_off_voltage')
                      %}  {%- set rcvt =
                      states('number.yambms_jk_bms_1_cell_request_charge_voltage_time')
                      %}     {%- set rfvt =
                      states('number.yambms_jk_bms_1_cell_request_float_voltage_time') 
                      %}    {%- set TimeOVPR =
                      states('sensor.yambms_jk_bms_1_cell_overvoltage_protection_release_time') 
                      %}  {%- set TimeUVPR =
                      states('sensor.yambms_jk_bms_1_cell_undervoltage_protection_release_time') 
                      %} 



                      {%- set rcvt = 'N/D' if rcvt == 'unknown' 
                          else "%.1f" % rcvt|float %}   
                      {%- set rfvt = 'N/D' if rfvt == 'unknown' 
                          else "%.1f" % rfvt|float %}   

                      <table> <tr><td colspan=2><b>VOLTAGE
                      SETTINGS</b></td></tr> <tr><td>OVP</td><td>{{ovp}}V
                      @{{TimeOVPR}}s</tr> <tr><td>Smart Sleep
                      </td><td>{{slv}}V</tr> <tr><td>RCV</td><td>{{rcv}}V
                      @{{rcvt}}h</tr> <tr><td>Bal.Start.</td><td>{{bsv}}V</tr> 
                      <tr><td>SOC 100%</td><td>{{soc100}}V</tr> 
                      <tr><td>OVPR</td><td>{{ovpr}}V</tr> 
                      <tr><td>RFV</td><td>{{rfv}}V @{{rfvt}}h</tr> 
                      <tr><td>UVPR</td><td>{{uvpr}}V</tr>  <tr><td>SOC
                      0%</td><td>{{soc0}}V</tr>   <tr><td>UVP</td><td>{{uvp}}V
                      @{{TimeUVPR}}s</tr>  <tr><td>Power
                      OFF</td><td>{{poff}}V</tr></table></div><br>         

                      <div><b>TEMPERATURES</b> {% macro pad_right(w, s) %}  {{ s
                      }} {% set slen =  w - (s|length) %} {% for idx in
                      range(slen)%} &nbsp; {%endfor %} {%- endmacro %} {% macro
                      green(s) %} <font color=#41CD52 family=Consolas> {{ s }}
                      </font> {%- endmacro %} <div>    {{ pad_right(14, 'MOS 
                      Temp.:') }}  {{
                      green(states('sensor.yambms_jk_bms_1_temperature_powertube')
                      + ' Â°C') }} <br>  {{ pad_right(15, 'Battery T1:') }}  {{
                      green(states('sensor.yambms_jk_bms_1_temperature_sensor_1')
                      +  ' Â°C') }} <br>  {{ pad_right(15, 'Battery T2:') }}  {{
                      green(states('sensor.yambms_jk_bms_1_temperature_sensor_2')
                      +  ' Â°C') }} <br>  {{ pad_right(15, 'Battery T3:') }}  {{
                      green(states('sensor.yambms_jk_bms_1_temperature_sensor_3')
                      +  ' Â°C') }}<br>  {{ pad_right(15, 'Battery T4:') }}  {{
                      green(states('sensor.yambms_jk_bms_1_temperature_sensor_4')
                      +  ' Â°C') }}           <br>  {{ pad_right(15, 'Battery
                      T5:') }}  {{
                      green(states('sensor.yambms_jk_bms_1_temperature_sensor_5')
                      +  ' Â°C') }}</div>
                  - type: markdown
                    content: >-
                      {%- set min_idx =
                      states('sensor.yambms_jk_bms_1_cell_voltage_min_cell_number')
                      %} 

                      {%- set max_idx =
                      states('sensor.yambms_jk_bms_1_cell_voltage_max_cell_number')
                      %}  

                      {%- set min_idxr =
                      states('sensor.yambms_jk_bms_1_cell_resistance_min_cell_number')
                      %} 

                      {%- set max_idxr =
                      states('sensor.yambms_jk_bms_1_cell_resistance_max_cell_number')
                      %}  

                      {%- set delta =
                      (states('sensor.yambms_jk_bms_1_cell_delta_voltage')|float)
                      %}  

                      <table> <tr><td colspan=4><b>CELL
                      INFO</b>&nbsp;&nbsp;(&Delta;:  {{delta}}V)</td></tr> {%
                      for idx in range(1, 17) -%} 
                        {%- set is_max = 1 if ((max_idx | int) == (idx | int)) else 0 %} 
                        {%- set is_min = 1 if ((min_idx | int) == (idx | int)) else 0 %}
                        {%- set is_maxr = 1 if ((max_idxr | int) == (idx | int)) else 0 %} 
                        {%- set is_minr = 1 if ((min_idxr | int) == (idx | int)) else 0 %}            
                        {%- set cell_volt = states('sensor.yambms_jk_bms_1_cell_voltage_%02d' % idx) %} 
                        {%- set cell_resistance = states('sensor.yambms_jk_bms_1_cell_resistance_%02d' % idx) %} 
                        {%- set font_start = '<font color="#3090C7">' if is_max 
                            else '<font color="red">' if is_min 
                            else '' %} 
                        {%- set font_end = '</font>' if is_max or is_min 
                            else '' %} 
                        {%- set font_start_resistance = '<font color="#3090C7">' if is_minr 
                            else '<font color="red">' if is_maxr 
                            else '' %} 
                        {%- set font_end_resistance = '</font>' if is_maxr or is_minr 
                            else '' %}                 
                        <tr><td>{{ "%02d" % idx}}.</td><td width=55px>{{ font_start }} {{ cell_volt }} V {{ font_end -}} </td><td width=8px align="center">/</td><td>{{ font_start_resistance }} {{ cell_resistance |float * 1000 }} mÎ©  {{ font_end_resistance }}</td><tr>{% endfor %}
                      </table> {%- set network_nodes_available =
                      states('sensor.yambms_jk_bms_1_network_nodes_available')
                      %}   <b>NET:{{network_nodes_available}}</b>&nbsp;&nbsp;
          - type: custom:stack-in-card
            keep:
              margin: false
              box_shadow: false
              background: false
            cards:
              - type: custom:stack-in-card
                margin: false
                columns: 2
                mode: horizontal
                cards:
                  - type: markdown
                    content: >-
                      {% macro pad_right(w, s) %} {{ s }} {% set slen =  w -
                      (s|length) %} 
                        {% for idx in range(slen)%} &nbsp; {%endfor %}
                      {%- endmacro %} 

                      {% macro green(s) %} <font color=#41CD52 size=2
                      family=Consolas> {{ s }} </font> {%- endmacro %} <div>  
                      {{ pad_right(20, 'Cycle Capacity:') }}  {{
                      green(states('sensor.yambms_jk_bms_1_battery_capacity_total_charging_cycle')
                      + " Ah") }}<br>    {{ pad_right(15, "Rem. Capacity:")
                      -}}    {{
                      green(states('sensor.yambms_jk_bms_1_battery_capacity_remaining')
                      + " Ah") }} <br>{{ pad_right(20, "Total Capacity:") -}} {{
                      green(states('number.yambms_jk_bms_1_battery_capacity_total_setting')
                      + " Ah")}}</div>
                                
                      </div>
                  - type: markdown
                    content: >-
                      {% macro pad_right(w, s) %}  {{ s }} {% set slen =  w -
                      (s|length) %} {% for idx in range(slen)%} &nbsp; {%endfor
                      %} {%- endmacro %} {% macro green(s) %} <font
                      color=#41CD52 family=Consolas> {{ s }} </font> {%-
                      endmacro %} <div>  {{ pad_right(18, "SOC:") -}}  {{
                      green(states('sensor.yambms_jk_bms_1_battery_capacity_state_of_charge')
                      + ' %') }}<br>{{ pad_right(18, "SOH:") -}}  {{
                      green(states('sensor.yambms_jk_bms_1_battery_soh_valuation')
                      + ' %') }}<br>   {{ pad_right(18, 'Cycle Count:') }}  {{
                      green(states('sensor.yambms_jk_bms_1_charging_cycles' )+ '
                      cycles') }}<br>  
                       {{ pad_right(20, 'Balance Curr:') }}   
                      {{green(states('sensor.yambms_jk_bms_1_balancing_current')
                      + ' A') }}  <br>{{ pad_right(20, 'Balancing Trig.:') }}   
                        {{green(states('number.yambms_jk_bms_1_balancing_trigger_voltage') + ' V') }} 
                      </div>
      - type: vertical-stack
        cards:
          - type: custom:stack-in-card
            keep:
              margin: false
              box_shadow: false
              background: false
            cards:
              - type: grid
                square: false
                columns: 1
                cards:
                  - type: markdown
                    content: >-
                      <center><font color=#3090C7 size=4>BMS_02 [{{
                      states('sensor.yambms_jk_bms_2_total_runtime_formatted') |
                      string }}]&nbsp;&nbsp;{{
                      (states('sensor.yambms_jk_bms_2_battery_capacity_state_of_charge')
                      + ' %') }}   ({{
                        (states('sensor.yambms_jk_bms_2_battery_capacity_remaining')) }}Ah)
                      </center>
              - type: grid
                square: false
                columns: 2
                cards:
                  - type: markdown
                    content: >-
                      {%- set online =
                      states('binary_sensor.yambms_jk_bms_2_status_online')
                      %}                      

                      {%- set is_working = "online" if (online|bool) else
                      "offline" %} 

                      {%- set font_start = '<b><font size=2 color="#41CD52">' if
                      (online|bool) else '<b><font size=2 color=red>' %} 

                      {%- set font_end = '</font></b>' if is_working else
                      '</font></b>' %} 

                      {{ font_start }} {{ "BMS:"}} {{ is_working }} {{font_end
                      -}}


                      {%- set precharging =
                      states('binary_sensor.yambms_jk_bms_2_status_precharging')
                      %}                      

                      {%- set is_working = "working" if (precharging|bool) else
                      "idle" %} 

                      {%- set font_start = '<b><font size=2 color="#41CD52">' if
                      (precharging|bool) else '<font size=2>' %} 

                      {%- set font_end = '</font></b>' if is_working else
                      '</font>' %} 

                      {{ font_start }} {{ "Precharging:"}} {{ is_working }}
                      {{font_end -}}


                      {%- set heating =
                      states('binary_sensor.yambms_jk_bms_2_status_heating')
                      %}                      

                      {%- set is_working = "working" if (heating|bool) else
                      "idle" %} 

                      {%- set font_start = '<b><font size=2 color="#41CD52">' if
                      (heating|bool) else '<font size=2>' %} 

                      {%- set font_end = '</font></b>' if is_working else
                      '</fontZ' %} 

                      {{ font_start }} {{ "Heating:"}} {{ is_working }}
                      {{font_end -}}
                  - type: markdown
                    content: >-
                      {%- set charging =
                      states('binary_sensor.yambms_jk_bms_2_status_charging')
                      %}                         

                      {%- set is_working = "working" if (charging|bool) else
                      "idle" %} 

                      {%- set font_start = '<b><font size=2 color="#41CD52">' if
                      (charging|bool) else '<font size=2>' %} 

                      {%- set font_end = '</font></b>' if is_working else
                      '</font>' %} 

                      {{ font_start }} {{ "Charging:"}} {{ is_working }} {{
                      font_end -}}


                      {%- set discharging =
                      states('binary_sensor.yambms_jk_bms_2_status_discharging')
                      %}                         

                      {%- set is_working = "working" if (discharging|bool) else
                      "idle" %} 

                      {%- set font_start = '<b><font size=2 color="#41CD52">' if
                      (discharging|bool) else '<font size=2>' %} 

                      {%- set font_end = '</font></b>' if is_working else
                      '</font>' %} 

                      {{ font_start }} {{ "Discharging:"}} {{ is_working }} {{
                      font_end -}}
                        
                      {%- set balancing_direction =
                      states('sensor.yambms_jk_bms_2_balancing_direction')%}  
                      {%- set is_working = "charging" if
                      (balancing_direction|int)==1 
                            else "discharging" if (balancing_direction|int)==2 
                            else "idle" if (balancing_direction|int)==0
                            else 'unknown' %} 
                      {%- set font_start = '<b><font size=2 color="#41CD52">' if
                      (balancing_direction|int)>0 
                            else '<b><font size=2 color=#3090C7>' if (balancing_direction|int)<0 
                            else '<font size=2>' %}                             
                      {%- set font_end = '</font></b>' if
                      (balancing_direction|int)!=0 else '</font>' %}  {{
                      font_start }} {{ "<br>Balancing:"}} {{ is_working }}
                      {{font_end -}}
          - type: custom:stack-in-card
            keep:
              margin: false
              box_shadow: false
              background: false
            cards:
              - type: grid
                square: false
                columns: 1
                cards:
                  - type: markdown
                    content: >-
                      {%- set power_draw =
                      states('sensor.yambms_jk_bms_2_battery_power')|float %} 
                      {%- set power_charging =
                      states('sensor.yambms_jk_bms_2_battery_power_charging')|float
                      %}  {%- set power_discharging =
                      states('sensor.yambms_jk_bms_2_battery_power_discharging')|float
                      %} 

                      {%- set power_label = "(charging)" if (power_charging)>0 
                            else "(discharging)" if (power_discharging)>0 
                            else "" %} 

                      {%- set power_value = power_charging if
                      (power_charging)>0 
                            else power_discharging if (power_discharging)>0 
                            else power_draw %} 

                      {%- set font_start = '<b><font color=#41CD52 size=6>' if
                      (power_charging)>0 
                            else '<b><font color=#3090C7 size=6>' if (power_discharging)>0 
                            else '<b><font color=#aaaaaa size=6>' %}      
                            
                      {%- set font_end = '</font></b>' if (power_charging)>0 or
                      (power_discharging)>0 else '' %} 

                      <center>{{font_start}}{{ power_value }}W
                      {{power_label}}{{font_end}}</center>  

                      {% macro pad_right(w, s) %} {{ s }} {% set slen =  w -
                      (s|length) %} 
                        {% for idx in range(slen)%} &nbsp; {%endfor %}
                      {%- endmacro %} 

                      {% macro green(s) %} <font color=#41CD52 size=2
                      family=Consolas> {{ s }} </font> {%- endmacro %}
                      <div>         
              - type: grid
                square: false
                columns: 2
                cards:
                  - type: markdown
                    content: >-
                      <center><b><font color=#41CD52
                      size=6>{{states('sensor.yambms_jk_bms_2_battery_voltage')
                      }}V</font></b><br> </center>   {% macro pad_right(w, s) %}
                      {{ s }} {% set slen =  w - (s|length) %} 
                        {% for idx in range(slen)%} &nbsp; {%endfor %}
                      {%- endmacro %} 

                      {% macro green(s) %} <font color=#41CD52 size=2
                      family=Consolas> {{ s }} </font> {%- endmacro %}
                      <div>          
                  - type: markdown
                    content: >-
                      <center><b><font color=#41CD52 size=6>{{
                      states('sensor.yambms_jk_bms_2_battery_current') }}
                      A</font></b><br> </center> {% macro pad_right(w, s) %}  {{
                      s }} {% set slen =  w - (s|length) %} {% for idx in
                      range(slen)%} &nbsp; {%endfor %} {%- endmacro %} {% macro
                      green(s) %} <font color=#41CD52 family=Consolas> {{ s }}
                      </font> {%- endmacro %}
          - type: custom:stack-in-card
            keep:
              margin: false
              box_shadow: false
              background: false
            cards:
              - type: grid
                square: false
                columns: 2
                cards:
                  - type: markdown
                    content: >-
                      <div> {%- set ovp =
                      states('number.yambms_jk_bms_2_cell_overvoltage_protection')
                      %}  {%- set slv =
                      states('number.yambms_jk_bms_2_cell_smart_sleep_voltage')
                      %}  {%- set rcv =
                      states('number.yambms_jk_bms_2_cell_request_charge_voltage')
                      %}  {%- set bsv =
                      states('number.yambms_jk_bms_2_cell_balancing_starting_voltage')
                      %}  {%- set soc100 =
                      states('number.yambms_jk_bms_2_cell_soc100_voltage') %} 
                      {%- set ovpr =
                      states('number.yambms_jk_bms_2_cell_overvoltage_protection_recovery')
                      %}  {%- set rfv =
                      states('number.yambms_jk_bms_2_cell_request_float_voltage')
                      %}  {%- set uvpr =
                      states('number.yambms_jk_bms_2_cell_undervoltage_protection_recovery')
                      %}  {%- set soc0 =
                      states('number.yambms_jk_bms_2_cell_soc0_voltage') %}  {%-
                      set uvp =
                      states('number.yambms_jk_bms_2_cell_undervoltage_protection')
                      %}  {%- set poff =
                      states('number.yambms_jk_bms_2_cell_power_off_voltage')
                      %}  {%- set rcvt =
                      states('number.yambms_jk_bms_2_cell_request_charge_voltage_time')
                      %}     {%- set rfvt =
                      states('number.yambms_jk_bms_2_cell_request_float_voltage_time') 
                      %}    {%- set TimeOVPR =
                      states('sensor.yambms_jk_bms_2_cell_overvoltage_protection_release_time') 
                      %}  {%- set TimeUVPR =
                      states('sensor.yambms_jk_bms_2_cell_undervoltage_protection_release_time') 
                      %} 



                      {%- set rcvt = 'N/D' if rcvt == 'unknown' 
                          else "%.1f" % rcvt|float %}   
                      {%- set rfvt = 'N/D' if rfvt == 'unknown' 
                          else "%.1f" % rfvt|float %}   

                      <table> <tr><td colspan=2><b>VOLTAGE
                      SETTINGS</b></td></tr> <tr><td>OVP</td><td>{{ovp}}V
                      @{{TimeOVPR}}s</tr> <tr><td>Smart Sleep
                      </td><td>{{slv}}V</tr> <tr><td>RCV</td><td>{{rcv}}V
                      @{{rcvt}}h</tr> <tr><td>Bal.Start.</td><td>{{bsv}}V</tr> 
                      <tr><td>SOC 100%</td><td>{{soc100}}V</tr> 
                      <tr><td>OVPR</td><td>{{ovpr}}V</tr> 
                      <tr><td>RFV</td><td>{{rfv}}V @{{rfvt}}h</tr> 
                      <tr><td>UVPR</td><td>{{uvpr}}V</tr>  <tr><td>SOC
                      0%</td><td>{{soc0}}V</tr>   <tr><td>UVP</td><td>{{uvp}}V
                      @{{TimeUVPR}}s</tr>  <tr><td>Power
                      OFF</td><td>{{poff}}V</tr></table></div><br>         

                      <div><b>TEMPERATURES</b> {% macro pad_right(w, s) %}  {{ s
                      }} {% set slen =  w - (s|length) %} {% for idx in
                      range(slen)%} &nbsp; {%endfor %} {%- endmacro %} {% macro
                      green(s) %} <font color=#41CD52 family=Consolas> {{ s }}
                      </font> {%- endmacro %} <div>    {{ pad_right(14, 'MOS 
                      Temp.:') }}  {{
                      green(states('sensor.yambms_jk_bms_2_temperature_powertube')
                      + ' Â°C') }} <br>  {{ pad_right(15, 'Battery T1:') }}  {{
                      green(states('sensor.yambms_jk_bms_2_temperature_sensor_1')
                      +  ' Â°C') }} <br>  {{ pad_right(15, 'Battery T2:') }}  {{
                      green(states('sensor.yambms_jk_bms_2_temperature_sensor_2')
                      +  ' Â°C') }} <br>  {{ pad_right(15, 'Battery T3:') }}  {{
                      green(states('sensor.yambms_jk_bms_2_temperature_sensor_3')
                      +  ' Â°C') }}<br>  {{ pad_right(15, 'Battery T4:') }}  {{
                      green(states('sensor.yambms_jk_bms_2_temperature_sensor_4')
                      +  ' Â°C') }}           <br>  {{ pad_right(15, 'Battery
                      T5:') }}  {{
                      green(states('sensor.yambms_jk_bms_2_temperature_sensor_5')
                      +  ' Â°C') }}</div>
                  - type: markdown
                    content: >-
                      {%- set min_idx =
                      states('sensor.yambms_jk_bms_2_cell_voltage_min_cell_number')
                      %} 

                      {%- set max_idx =
                      states('sensor.yambms_jk_bms_2_cell_voltage_max_cell_number')
                      %}  

                      {%- set min_idxr =
                      states('sensor.yambms_jk_bms_2_cell_resistance_min_cell_number')
                      %} 

                      {%- set max_idxr =
                      states('sensor.yambms_jk_bms_2_cell_resistance_max_cell_number')
                      %}  

                      {%- set delta =
                      (states('sensor.yambms_jk_bms_2_cell_delta_voltage')|float)
                      %}  

                      <table> <tr><td colspan=4><b>CELL
                      INFO</b>&nbsp;&nbsp;(&Delta;:  {{delta}}V)</td></tr> {%
                      for idx in range(1, 17) -%} 
                        {%- set is_max = 1 if ((max_idx | int) == (idx | int)) else 0 %} 
                        {%- set is_min = 1 if ((min_idx | int) == (idx | int)) else 0 %}
                        {%- set is_maxr = 1 if ((max_idxr | int) == (idx | int)) else 0 %} 
                        {%- set is_minr = 1 if ((min_idxr | int) == (idx | int)) else 0 %}            
                        {%- set cell_volt = states('sensor.yambms_jk_bms_2_cell_voltage_%02d' % idx) %} 
                        {%- set cell_resistance = states('sensor.yambms_jk_bms_2_cell_resistance_%02d' % idx) %} 
                        {%- set font_start = '<font color="#3090C7">' if is_max 
                            else '<font color="red">' if is_min 
                            else '' %} 
                        {%- set font_end = '</font>' if is_max or is_min 
                            else '' %} 
                        {%- set font_start_resistance = '<font color="#3090C7">' if is_minr 
                            else '<font color="red">' if is_maxr 
                            else '' %} 
                        {%- set font_end_resistance = '</font>' if is_maxr or is_minr 
                            else '' %}                 
                        <tr><td>{{ "%02d" % idx}}.</td><td width=55px>{{ font_start }} {{ cell_volt }} V {{ font_end -}} </td><td width=8px align="center">/</td><td>{{ font_start_resistance }} {{ cell_resistance |float * 1000 }} mÎ©  {{ font_end_resistance }}</td><tr>{% endfor %}
                      </table> {%- set network_nodes_available =
                      states('sensor.yambms_jk_bms_2_network_nodes_available')
                      %}   <b>NET:{{network_nodes_available}}</b>&nbsp;&nbsp;
          - type: custom:stack-in-card
            keep:
              margin: false
              box_shadow: false
              background: false
            cards:
              - type: custom:stack-in-card
                margin: false
                columns: 2
                mode: horizontal
                cards:
                  - type: markdown
                    content: >-
                      {% macro pad_right(w, s) %} {{ s }} {% set slen =  w -
                      (s|length) %} 
                        {% for idx in range(slen)%} &nbsp; {%endfor %}
                      {%- endmacro %} 

                      {% macro green(s) %} <font color=#41CD52 size=2
                      family=Consolas> {{ s }} </font> {%- endmacro %} <div>  
                      {{ pad_right(20, 'Cycle Capacity:') }}  {{
                      green(states('sensor.yambms_jk_bms_2_battery_capacity_total_charging_cycle')
                      + " Ah") }}<br>    {{ pad_right(15, "Rem. Capacity:")
                      -}}    {{
                      green(states('sensor.yambms_jk_bms_2_battery_capacity_remaining')
                      + " Ah") }} <br>{{ pad_right(20, "Total Capacity:") -}} {{
                      green(states('number.yambms_jk_bms_2_battery_capacity_total_setting')
                      + " Ah")}}</div>
                                
                      </div>
                  - type: markdown
                    content: >-
                      {% macro pad_right(w, s) %}  {{ s }} {% set slen =  w -
                      (s|length) %} {% for idx in range(slen)%} &nbsp; {%endfor
                      %} {%- endmacro %} {% macro green(s) %} <font
                      color=#41CD52 family=Consolas> {{ s }} </font> {%-
                      endmacro %} <div>  {{ pad_right(18, "SOC:") -}}  {{
                      green(states('sensor.yambms_jk_bms_2_battery_capacity_state_of_charge')
                      + ' %') }}<br>{{ pad_right(18, "SOH:") -}}  {{
                      green(states('sensor.yambms_jk_bms_2_battery_soh_valuation')
                      + ' %') }}<br>   {{ pad_right(18, 'Cycle Count:') }}  {{
                      green(states('sensor.yambms_jk_bms_2_charging_cycles' )+ '
                      cycles') }}<br>  
                       {{ pad_right(20, 'Balance Curr:') }}   
                      {{green(states('sensor.yambms_jk_bms_2_balancing_current')
                      + ' A') }}  <br>{{ pad_right(20, 'Balancing Trig.:') }}   
                        {{green(states('number.yambms_jk_bms_2_balancing_trigger_voltage') + ' V') }} 
                      </div>
  - title: BMS1 (cells)
    cards:
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.yambms_jk_bms_1_cell_voltage_01
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.yambms_jk_bms_1_cell_voltage_05
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.yambms_jk_bms_1_cell_voltage_02
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.yambms_jk_bms_1_cell_voltage_06
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.yambms_jk_bms_1_cell_voltage_03
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.yambms_jk_bms_1_cell_voltage_07
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.yambms_jk_bms_1_cell_voltage_04
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.yambms_jk_bms_1_cell_voltage_08
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.yambms_jk_bms_1_cell_voltage_09
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.yambms_jk_bms_1_cell_voltage_10
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.yambms_jk_bms_1_cell_voltage_11
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.yambms_jk_bms_1_cell_voltage_12
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.yambms_jk_bms_1_cell_voltage_13
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.yambms_jk_bms_1_cell_voltage_14
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.yambms_jk_bms_1_cell_voltage_15
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.yambms_jk_bms_1_cell_voltage_16
      - graph: line
        type: sensor
        detail: 1
        entity: sensor.yambms_jk_bms_1_cell_voltage_max_cell_number
      - graph: line
        type: sensor
        detail: 1
        entity: sensor.yambms_jk_bms_1_cell_voltage_min_cell_number
  - title: BMS2(cells)
    cards:
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.yambms_jk_bms_2_cell_voltage_01
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.yambms_jk_bms_2_cell_voltage_05
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.yambms_jk_bms_2_cell_voltage_02
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.yambms_jk_bms_2_cell_voltage_06
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.yambms_jk_bms_2_cell_voltage_03
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.yambms_jk_bms_2_cell_voltage_07
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.yambms_jk_bms_2_cell_voltage_04
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.yambms_jk_bms_2_cell_voltage_08
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.yambms_jk_bms_2_cell_voltage_09
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.yambms_jk_bms_2_cell_voltage_10
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.yambms_jk_bms_2_cell_voltage_11
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.yambms_jk_bms_2_cell_voltage_12
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.yambms_jk_bms_2_cell_voltage_13
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.yambms_jk_bms_2_cell_voltage_14
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.yambms_jk_bms_2_cell_voltage_15
      - type: gauge
        needle: true
        max: 3.65
        min: 3
        segments:
          - from: 2
            color: '#db4437'
          - from: 2.4
            color: '#ffa600'
          - from: 3.1
            color: '#43a047'
          - from: 3.35
            color: '#999999'
          - from: 3.45
            color: '#00a6ee'
          - from: 3.6
            color: '#ffa600'
          - from: 3.65
            color: '#db4437'
        entity: sensor.yambms_jk_bms_2_cell_voltage_16
      - graph: line
        type: sensor
        detail: 1
        entity: sensor.yambms_jk_bms_2_cell_voltage_max_cell_number
      - graph: line
        type: sensor
        detail: 1
        entity: sensor.yambms_jk_bms_2_cell_voltage_min_cell_number
  - path: bms0_settings
    title: BMS1 (SETTINGS)
    icon: ''
    cards:
      - type: custom:stack-in-card
        keep:
          margin: false
          box_shadow: false
          background: false
        cards:
          - type: grid
            square: false
            columns: 2
            cards:
              - type: markdown
                content: >-
                  {%- set vid = states('sensor.yambms_jk_bms_1_info_vendorid')
                  %} {%- set swv =
                  states('sensor.yambms_jk_bms_1_info_software_version') %} {%-
                  set hwv =
                  states('sensor.yambms_jk_bms_1_info_hardware_version') %} {%-
                  set dna = states('sensor.yambms_jk_bms_1_info_device_name') %}
                  {%- set dsn =
                  states('sensor.yambms_jk_bms_1_info_device_serial_number')
                  %}               {%- set pin =
                  states('sensor.yambms_jk_bms_1_info_device_password') %}  {%-
                  set settings_pin =
                  states('sensor.yambms_jk_bms_1_info_device_setup_passcode') %}
                  {%- set uart1 =
                  states('sensor.yambms_jk_bms_1_uart1_protocol_number') %}  {%-
                  set uart2 =
                  states('sensor.yambms_jk_bms_1_uart2_protocol_number') %} {%-
                  set cell_number_settings =
                  states('sensor.yambms_jk_bms_1_cell_count_settings') %} {%-
                  set cell_number_real =
                  states('sensor.yambms_jk_bms_1_cell_count_real') %} <table>
                  <tr><td colspan=2><b>BMS INFO:</b></td></tr>
                  <tr><td>VendorID:</td><td>{{vid}}</tr> <tr><td>HARD
                  ver:</td><td>{{swv}}</tr> <tr><td>SOFT
                  ver:</td><td>{{hwv}}</tr>           <tr><td>DEV
                  name:</td><td>{{dna}}</tr>  <tr><td>DEV
                  S/N</td><td>{{dsn}}</tr>               <tr><td>BT
                  PASS:</td><td>{{pin}}</tr><tr><td>
                  PASS:</td><td>{{settings_pin}}</tr>
                  <tr><td>UART1:</td><td>{{uart1}}</tr>   
                  <tr><td>UART2:</td><td>{{uart2}}</tr>            <tr><td>Cells
                  (sett.):</td><td>{{cell_number_settings}}</tr>                         
                  <tr><td>Cells
                  (real):</td><td>{{cell_number_real}}</tr>                                       
                  </table><br>
              - type: markdown
                content: >-
                  {%- set min_idx =
                  states('sensor.yambms_jk_bms_1_cell_voltage_min_cell_number')
                  %} 

                  {%- set max_idx =
                  states('sensor.yambms_jk_bms_1_cell_voltage_max_cell_number')
                  %}  

                  {%- set delta =
                  (states('sensor.yambms_jk_bms_1_cell_delta_voltage')|float)
                  %}  

                  <table> <tr><td colspan=4><b>NETWORK
                  DEVICES:</b>&nbsp;&nbsp;</td></tr> <tr><td>{%- set
                  network_nodes_available =
                  states('sensor.yambms_jk_bms_1_network_nodes_available') %} 
                  </td></tr></table>

                  {{network_nodes_available}}</b>&nbsp;&nbsp;
      - type: entities
        entities:
          - entity: switch.yambms_jk_bms_1_charging
            name: CHARGE
          - entity: switch.yambms_jk_bms_1_discharging
            name: DISCHARGE
          - entity: switch.yambms_jk_bms_1_balancing
            name: BALANCING
          - entity: switch.yambms_jk_bms_1_emergency
            name: EMERGENCY
          - entity: switch.yambms_jk_bms_1_heating
            name: HEATING
          - entity: switch.yambms_jk_bms_1_disable_temperature_sensors
            name: DISABLE TEMPERATURE SENSORS
          - entity: switch.yambms_jk_bms_1_display_always_on
            name: DISPLAY ALWAYS ON
          - entity: switch.yambms_jk_bms_1_smart_sleep_on
            name: SMART SLEEP ON
          - entity: switch.yambms_jk_bms_1_disable_pcl_module
            name: DISABLE PCL MODULE
          - entity: switch.yambms_jk_bms_1_timed_stored_data
            name: TIMED_STORED_DATA
          - entity: switch.yambms_jk_bms_1_charging_float_mode
            name: CHARGE FLOAT MODE
        title: Switch (Read Only)
        show_header_toggle: false
      - type: vertical-stack
        cards:
          - type: custom:stack-in-card
            keep:
              margin: false
              box_shadow: false
              background: false
            cards:
              - type: grid
                square: false
                columns: 1
                cards:
                  - type: markdown
                    content: |-
                      <center>
                        {%- set alarm_active = states('sensor.yambms_jk_bms_1_battery_total_alarms_active')|int %}
                        {%- set alarm_active = 0 %}                
                        {%- set alarm_count = states('sensor.yambms_jk_bms_1_battery_total_alarms_count')|int %}
                        {%- set alarm_label = '<font size=4>ALARMS BMS_00</font>' if alarm_active==0
                            else '<b><font size=5 color=red>ALARMS BMS_00</font></b>' %}
                        {{alarm_label}} ({{ alarm_active }}/{{ alarm_count -}})<br></center>
              - type: grid
                square: false
                columns: 1
                cards:
                  - type: markdown
                    content: >-
                      {%- set alarm_active =
                      states('sensor.yambms_jk_bms_1_battery_total_alarms_active')|int
                      %}

                      {%- set alarm_count =
                      states('sensor.yambms_jk_bms_1_battery_total_alarms_count')|int
                      %}

                      {%- set alarm_active = 0 %} 

                      {%- set alarms_label = '<center>No alarms found. Working
                      well</center>' if (alarm_active==0)
                          else 'ALARMS FOUND:' %} 
                      {{ alarms_label }}    

                      <center>  {% for state in states -%} 
                        {% if state.entity_id.startswith('binary_sensor.yambms_jk_bms_1_alarm_') and state.state!="off" %}
                          {% set last_word = state.name.split()[-1] | string %}
                          {% set last_status = state.state %}
                          {%- set font_start = '<font color="#3090C7">' if last_status=="off"
                              else '<font color="red">' if last_status=="on"  
                              else '<font color="gray">' %} 
                          {%- set font_end = '</font>' if last_status 
                              else '' %} 
                         {{ font_start }} {{ last_word }} (status: {{last_status}}) {{ font_end -}}<br>
                        {% endif %}
                      {% endfor %} </center>
          - type: grid
            square: false
            columns: 1
            cards:
              - type: markdown
                content: |-
                  <center>
                    {%- set alarm_active = states('sensor.yambms_jk_bms_2_battery_total_alarms_active')|int %}
                    {%- set alarm_active = 0 %}                
                    {%- set alarm_count = states('sensor.yambms_jk_bms_2_battery_total_alarms_count')|int %}
                    {%- set alarm_label = '<font size=4>ALARMS BMS_01</font>' if alarm_active==0
                        else '<b><font size=5 color=red>ALARMS BMS_01</font></b>' %}
                    {{alarm_label}} ({{ alarm_active }}/{{ alarm_count -}})<br></center>
          - type: grid
            square: false
            columns: 1
            cards:
              - type: markdown
                content: >-
                  {%- set alarm_active =
                  states('sensor.yambms_jk_bms_2_battery_total_alarms_active')|int
                  %}

                  {%- set alarm_count =
                  states('sensor.yambms_jk_bms_2_battery_total_alarms_count')|int
                  %}

                  {%- set alarm_active = 0 %} 

                  {%- set alarms_label = '<center>No alarms found. Working
                  well</center>' if (alarm_active==0)
                      else 'ALARMS FOUND:' %} 
                  {{ alarms_label }}    

                  <center>  {% for state in states -%} 
                    {% if state.entity_id.startswith('binary_sensor.yambms_jk_bms_2_alarm_') and state.state!="off" %}
                      {% set last_word = state.name.split()[-1] | string %}
                      {% set last_status = state.state %}
                      {%- set font_start = '<font color="#3090C7">' if last_status=="off"
                          else '<font color="red">' if last_status=="on"  
                          else '<font color="gray">' %} 
                      {%- set font_end = '</font>' if last_status 
                          else '' %} 
                     {{ font_start }} {{ last_word }} (status: {{last_status}}) {{ font_end -}}<br>
                    {% endif %}
                  {% endfor %} </center>
  - path: bms1_settings
    title: BMS2 (SETTINGS)
    icon: ''
    cards:
      - type: vertical-stack
        cards:
          - type: custom:stack-in-card
            keep:
              margin: false
              box_shadow: false
              background: false
            cards:
              - type: grid
                square: false
                columns: 2
                cards:
                  - type: markdown
                    content: >-
                      {%- set vid =
                      states('sensor.yambms_jk_bms_2_info_vendorid') %} {%- set
                      swv =
                      states('sensor.yambms_jk_bms_2_info_software_version') %}
                      {%- set hwv =
                      states('sensor.yambms_jk_bms_2_info_hardware_version') %}
                      {%- set dna =
                      states('sensor.yambms_jk_bms_2_info_device_name') %} {%-
                      set dsn =
                      states('sensor.yambms_jk_bms_2_info_device_serial_number')
                      %}               {%- set pin =
                      states('sensor.yambms_jk_bms_2_info_device_password') %} 
                      {%- set settings_pin =
                      states('sensor.yambms_jk_bms_2_info_device_setup_passcode')
                      %} {%- set uart1 =
                      states('sensor.yambms_jk_bms_2_uart1_protocol_number') %} 
                      {%- set uart2 =
                      states('sensor.yambms_jk_bms_2_uart2_protocol_number') %}
                      {%- set cell_number_settings =
                      states('sensor.yambms_jk_bms_2_cell_count_settings') %}
                      {%- set cell_number_real =
                      states('sensor.yambms_jk_bms_2_cell_count_real') %}
                      <table> <tr><td colspan=2><b>BMS INFO:</b></td></tr>
                      <tr><td>VendorID:</td><td>{{vid}}</tr> <tr><td>HARD
                      ver:</td><td>{{swv}}</tr> <tr><td>SOFT
                      ver:</td><td>{{hwv}}</tr>           <tr><td>DEV
                      name:</td><td>{{dna}}</tr>  <tr><td>DEV
                      S/N</td><td>{{dsn}}</tr>               <tr><td>BT
                      PASS:</td><td>{{pin}}</tr><tr><td>
                      PASS:</td><td>{{settings_pin}}</tr>
                      <tr><td>UART1:</td><td>{{uart1}}</tr>   
                      <tr><td>UART2:</td><td>{{uart2}}</tr>           
                      <tr><td>Cells
                      (sett.):</td><td>{{cell_number_settings}}</tr>                         
                      <tr><td>Cells
                      (real):</td><td>{{cell_number_real}}</tr>                                       
                      </table><br>
                  - type: markdown
                    content: >-
                      {%- set min_idx =
                      states('sensor.yambms_jk_bms_2_cell_voltage_min_cell_number')
                      %} 

                      {%- set max_idx =
                      states('sensor.yambms_jk_bms_2_cell_voltage_max_cell_number')
                      %}  

                      {%- set delta =
                      (states('sensor.yambms_jk_bms_2_cell_delta_voltage')|float)
                      %}  

                      <table> <tr><td colspan=4><b>NETWORK
                      DEVICES:</b>&nbsp;&nbsp;</td></tr> <tr><td>{%- set
                      network_nodes_available =
                      states('sensor.yambms_jk_bms_2_network_nodes_available')
                      %}  </td></tr></table>

                      {{network_nodes_available}}</b>&nbsp;&nbsp;
      - type: entities
        entities:
          - entity: switch.yambms_jk_bms_2_charging
            name: CHARGE
          - entity: switch.yambms_jk_bms_2_discharging
            name: DISCHARGE
          - entity: switch.yambms_jk_bms_2_balancing
            name: BALANCING
          - entity: switch.yambms_jk_bms_2_emergency
            name: EMERGENCY
          - entity: switch.yambms_jk_bms_2_heating
            name: HEATING
          - entity: switch.yambms_jk_bms_2_disable_temperature_sensors
            name: DISABLE TEMPERATURE SENSORS
          - entity: switch.yambms_jk_bms_2_display_always_on
            name: DISPLAY ALWAYS ON
          - entity: switch.yambms_jk_bms_2_smart_sleep_on
            name: SMART SLEEP ON
          - entity: switch.yambms_jk_bms_2_disable_pcl_module
            name: DISABLE PCL MODULE
          - entity: switch.yambms_jk_bms_2_timed_stored_data
            name: TIMED_STORED_DATA
          - entity: switch.yambms_jk_bms_2_charging_float_mode
            name: CHARGE FLOAT MODE
        title: Switch (Read Only)
        show_header_toggle: false
      - type: vertical-stack
        cards:
          - type: custom:stack-in-card
            keep:
              margin: false
              box_shadow: false
              background: false
            cards:
              - type: grid
                square: false
                columns: 1
                cards:
                  - type: markdown
                    content: |-
                      <center>
                        {%- set alarm_active = states('sensor.yambms_jk_bms_1_battery_total_alarms_active')|int %}
                        {%- set alarm_active = 0 %}                
                        {%- set alarm_count = states('sensor.yambms_jk_bms_1_battery_total_alarms_count')|int %}
                        {%- set alarm_label = '<font size=4>ALARMS BMS_00</font>' if alarm_active==0
                            else '<b><font size=5 color=red>ALARMS BMS_00</font></b>' %}
                        {{alarm_label}} ({{ alarm_active }}/{{ alarm_count -}})<br></center>
              - type: grid
                square: false
                columns: 1
                cards:
                  - type: markdown
                    content: >-
                      {%- set alarm_active =
                      states('sensor.yambms_jk_bms_1_battery_total_alarms_active')|int
                      %}

                      {%- set alarm_count =
                      states('sensor.yambms_jk_bms_1_battery_total_alarms_count')|int
                      %}

                      {%- set alarm_active = 0 %} 

                      {%- set alarms_label = '<center>No alarms found. Working
                      well</center>' if (alarm_active==0)
                          else 'ALARMS FOUND:' %} 
                      {{ alarms_label }}    

                      <center>  {% for state in states -%} 
                        {% if state.entity_id.startswith('binary_sensor.yambms_jk_bms_1_alarm_') and state.state!="off" %}
                          {% set last_word = state.name.split()[-1] | string %}
                          {% set last_status = state.state %}
                          {%- set font_start = '<font color="#3090C7">' if last_status=="off"
                              else '<font color="red">' if last_status=="on"  
                              else '<font color="gray">' %} 
                          {%- set font_end = '</font>' if last_status 
                              else '' %} 
                         {{ font_start }} {{ last_word }} (status: {{last_status}}) {{ font_end -}}<br>
                        {% endif %}
                      {% endfor %} </center>
          - type: grid
            square: false
            columns: 1
            cards:
              - type: markdown
                content: |-
                  <center>
                    {%- set alarm_active = states('sensor.yambms_jk_bms_2_battery_total_alarms_active')|int %}
                    {%- set alarm_active = 0 %}                
                    {%- set alarm_count = states('sensor.yambms_jk_bms_2_battery_total_alarms_count')|int %}
                    {%- set alarm_label = '<font size=4>ALARMS BMS_01</font>' if alarm_active==0
                        else '<b><font size=5 color=red>ALARMS BMS_01</font></b>' %}
                    {{alarm_label}} ({{ alarm_active }}/{{ alarm_count -}})<br></center>
          - type: grid
            square: false
            columns: 1
            cards:
              - type: markdown
                content: >-
                  {%- set alarm_active =
                  states('sensor.yambms_jk_bms_2_battery_total_alarms_active')|int
                  %}

                  {%- set alarm_count =
                  states('sensor.yambms_jk_bms_2_battery_total_alarms_count')|int
                  %}

                  {%- set alarm_active = 0 %} 

                  {%- set alarms_label = '<center>No alarms found. Working
                  well</center>' if (alarm_active==0)
                      else 'ALARMS FOUND:' %} 
                  {{ alarms_label }}    

                  <center>  {% for state in states -%} 
                    {% if state.entity_id.startswith('binary_sensor.yambms_jk_bms_2_alarm_') and state.state!="off" %}
                      {% set last_word = state.name.split()[-1] | string %}
                      {% set last_status = state.state %}
                      {%- set font_start = '<font color="#3090C7">' if last_status=="off"
                          else '<font color="red">' if last_status=="on"  
                          else '<font color="gray">' %} 
                      {%- set font_end = '</font>' if last_status 
                          else '' %} 
                     {{ font_start }} {{ last_word }} (status: {{last_status}}) {{ font_end -}}<br>
                    {% endif %}
                  {% endfor %} </center>
  - title: BMS1 (PROTECTION)
    path: protection_bms1
    cards:
      - type: entities
        entities:
          - entity: number.yambms_jk_bms_1_mos_overtemperature_protection
            name: MOS overT
          - entity: number.yambms_jk_bms_1_mos_overtemperature_protection_recovery
            name: MOS overT recovery
          - entity: number.yambms_jk_bms_1_charging_overtemperature_protection
            name: charging overT
          - entity: number.yambms_jk_bms_1_discharging_overtemperature_protection
            name: discharging overT
          - entity: >-
              number.yambms_jk_bms_1_charging_overtemperature_protection_recovery
            name: charging overT recovery
          - entity: >-
              number.yambms_jk_bms_1_discharging_overtemperature_protection_recovery
            name: discharging overT recovery
          - entity: number.yambms_jk_bms_1_charging_lowtemperature_protection_recovery
            name: charging lowT recovery
          - entity: number.yambms_jk_bms_1_charging_lowtemperature_protection
            name: charging lowT
        title: TEMPERATURE
      - type: entities
        entities:
          - entity: number.yambms_jk_bms_1_max_charging_current
            name: MAX current
          - entity: number.yambms_jk_bms_1_charging_overcurrent_protection_delay
            name: Over current delay
          - entity: >-
              number.yambms_jk_bms_1_charging_overcurrent_protection_recovery_delay
            name: Over current recovery delay
          - entity: >-
              sensor.yambms_jk_bms_1_charging_overcurrent_protection_release_time
            name: Over current release time
          - entity: >-
              sensor.yambms_jk_bms_1_charging_short_circuit_protection_release_time
            name: ShortCircuit release time
          - entity: number.yambms_jk_bms_1_precharging_time_from_discharge
            name: Precharging time from discharging
          - entity: number.yambms_jk_bms_1_cell_request_charge_voltage_time
            name: Absortion Time
          - entity: number.yambms_jk_bms_1_cell_request_float_voltage_time
            name: Float Time
        title: CHARGING protection
      - type: entities
        entities:
          - entity: number.yambms_jk_bms_1_max_discharging_current
            name: MAX current
          - entity: number.yambms_jk_bms_1_discharging_overcurrent_protection_delay
            name: Over current delay
          - entity: >-
              number.yambms_jk_bms_1_discharging_overcurrent_protection_recovery_delay
            name: Over current recovery delay
          - entity: >-
              sensor.yambms_jk_bms_1_discharging_overcurrent_protection_release_time
            name: Over current release time
          - entity: >-
              sensor.yambms_jk_bms_1_discharging_short_circuit_protection_release_time
            name: ShortCircuit release time
          - entity: number.yambms_jk_bms_2_cell_request_float_voltage_time
        title: DISCHARGING PROTECTION
      - type: entities
        entities:
          - entity: number.yambms_jk_bms_1_short_circuit_protection_delay
            name: Delay
          - entity: number.yambms_jk_bms_1_short_circuit_protection_recovery_delay
            name: Recovery delay
        title: SHORT CIRCUIT PROTECTION
      - type: entities
        entities:
          - entity: number.yambms_jk_bms_1_max_balancing_current
            name: MAX current
        title: BALANCING PROTECTION
  - title: BMS2 (PROTECTION)
    path: protection_bms2
    cards:
      - type: entities
        entities:
          - entity: number.yambms_jk_bms_2_mos_overtemperature_protection
            name: MOS overT
          - entity: number.yambms_jk_bms_2_mos_overtemperature_protection_recovery
            name: MOS overT recovery
          - entity: number.yambms_jk_bms_2_charging_overtemperature_protection
            name: charging overT
          - entity: number.yambms_jk_bms_2_discharging_overtemperature_protection
            name: discharging overT
          - entity: >-
              number.yambms_jk_bms_2_charging_overtemperature_protection_recovery
            name: charging overT recovery
          - entity: >-
              number.yambms_jk_bms_2_discharging_overtemperature_protection_recovery
            name: discharging overT recovery
          - entity: number.yambms_jk_bms_2_charging_lowtemperature_protection_recovery
            name: charging lowT recovery
          - entity: number.yambms_jk_bms_2_charging_lowtemperature_protection
            name: charging lowT
        title: TEMPERATURE
      - type: entities
        entities:
          - entity: number.yambms_jk_bms_2_max_charging_current
            name: MAX current
          - entity: number.yambms_jk_bms_2_charging_overcurrent_protection_delay
            name: Over current delay
          - entity: >-
              number.yambms_jk_bms_2_charging_overcurrent_protection_recovery_delay
            name: Over current recovery delay
          - entity: >-
              sensor.yambms_jk_bms_2_charging_overcurrent_protection_release_time
            name: Over current release time
          - entity: >-
              sensor.yambms_jk_bms_2_charging_short_circuit_protection_release_time
            name: ShortCircuit release time
          - entity: number.yambms_jk_bms_2_precharging_time_from_discharge
            name: Precharging time from discharging
          - entity: number.yambms_jk_bms_2_cell_request_charge_voltage_time
            name: Absortion Time
          - entity: number.yambms_jk_bms_2_cell_request_float_voltage_time
            name: Float Time
        title: CHARGING protection
      - type: entities
        entities:
          - entity: number.yambms_jk_bms_2_max_discharging_current
            name: MAX current
          - entity: number.yambms_jk_bms_2_discharging_overcurrent_protection_delay
            name: Over current delay
          - entity: >-
              number.yambms_jk_bms_2_discharging_overcurrent_protection_recovery_delay
            name: Over current recovery delay
          - entity: >-
              sensor.yambms_jk_bms_2_discharging_overcurrent_protection_release_time
            name: Over current release time
          - entity: >-
              sensor.yambms_jk_bms_2_discharging_short_circuit_protection_release_time
            name: ShortCircuit release time
        title: DISCHARGING PROTECTION
      - type: entities
        entities:
          - entity: number.yambms_jk_bms_2_short_circuit_protection_delay
            name: Delay
          - entity: number.yambms_jk_bms_2_short_circuit_protection_recovery_delay
            name: Recovery delay
        title: SHORT CIRCUIT PROTECTION
      - type: entities
        entities:
          - entity: number.yambms_jk_bms_2_max_balancing_current
            name: MAX current
        title: BALANCING PROTECTION
  - title: YamBMS
    type: sections
    max_columns: 3
    sections:
      - type: grid
        cards:
          - graph: line
            type: sensor
            entity: sensor.yambms_smart_bms_1_total_voltage_o
            detail: 2
            layout_options:
              grid_columns: 2
              grid_rows: 2
            name: Voltage
            hours_to_show: 8
          - graph: line
            type: sensor
            entity: sensor.yambms_smart_bms_1_battery_soc
            detail: 2
            name: SoC
            hours_to_show: 8
          - type: gauge
            entity: sensor.yambms_smart_bms_1_current_s
            needle: true
            severity:
              green: 0
              yellow: -250
              red: -500
            max: 500
            min: -500
            name: Current
            layout_options:
              grid_columns: 2
              grid_rows: 3
          - type: gauge
            entity: sensor.yambms_smart_bms_1_power_s
            needle: true
            severity:
              green: 0
              yellow: -2500
              red: -5000
            max: 5000
            min: -5000
            name: Power
            layout_options:
              grid_columns: 2
              grid_rows: 3
          - type: tile
            entity: sensor.yambms_smart_bms_1_installed_battery_capacity_s
            name: Installed Battery Capacity
          - type: tile
            entity: sensor.yambms_smart_bms_1_battery_soh
            name: Battery SoH
          - type: tile
            entity: sensor.yambms_smart_bms_1_battery_capacity_s
            name: Battery Capacity
          - type: tile
            entity: sensor.yambms_smart_bms_1_capacity_remaining_s
            name: Capacity Remaining
          - type: tile
            entity: sensor.yambms_smart_bms_1_delta_cell_voltage
            name: Delta Cell Voltage
          - type: tile
            entity: binary_sensor.yambms_smart_bms_1_equalizing_state
            name: Equalizing state
          - type: entities
            entities:
              - entity: sensor.yambms_smart_bms_1_max_cell_voltage
                name: Max Cell V.
              - entity: sensor.yambms_smart_bms_1_max_voltage_cell
                name: Cell number
            layout_options:
              grid_columns: 2
              grid_rows: 2
          - type: entities
            entities:
              - entity: sensor.yambms_smart_bms_1_min_cell_voltage
                name: Min Cell V.
              - entity: sensor.yambms_smart_bms_1_min_voltage_cell
                name: Cell number
            layout_options:
              grid_columns: 2
              grid_rows: 2
          - type: entities
            entities:
              - entity: sensor.yambms_smart_bms_1_max_temperature
                name: Max temp.
              - entity: sensor.yambms_smart_bms_1_max_temperature_sensor
                name: Sensor number
            layout_options:
              grid_columns: 2
              grid_rows: 2
          - type: entities
            entities:
              - entity: sensor.yambms_smart_bms_1_min_temperature
                name: Min temp.
              - entity: sensor.yambms_smart_bms_1_min_temperature_sensor
                name: Sensor number
            layout_options:
              grid_columns: 2
              grid_rows: 2
        title: YamBMS - Battery
        column_span: 1
      - type: grid
        cards:
          - type: tile
            entity: binary_sensor.yambms_canbus_1_status
            name: CANBUS Status
          - type: tile
            entity: binary_sensor.yambms_esp32_online_status
            name: ESP32 Status
          - type: tile
            entity: sensor.yambms_smart_bms_1_charging_status
            name: Charging Status
          - type: tile
            entity: sensor.yambms_esp32_uptime
            name: ESP32 Uptime
          - type: tile
            entity: sensor.yambms_smart_bms_1_charging_instruction
            name: Charging Instruction
          - type: tile
            entity: sensor.yambms_smart_bms_1_last_complete_charge
            name: Last Complete Charge
          - type: tile
            entity: sensor.yambms_smart_bms_1_alarm
            name: Alarm
          - type: tile
            entity: sensor.yambms_smart_bms_1_warning
            name: Warning
          - type: entities
            entities:
              - entity: sensor.yambms_smart_bms_1_bms_count
                name: BMS count
              - entity: sensor.yambms_smart_bms_1_bms_combined
                name: BMS combined
              - entity: sensor.yambms_smart_bms_1_bms_in_alarm
                name: BMS in alarm
            layout_options:
              grid_columns: 2
              grid_rows: 3
          - type: entities
            entities:
              - entity: sensor.yambms_smart_bms_1_shunt_count
                name: Shunt count
              - entity: sensor.yambms_smart_bms_1_shunt_combined
                name: Shunt combined
            layout_options:
              grid_columns: 2
              grid_rows: 3
          - type: entities
            entities:
              - entity: sensor.yambms_smart_bms_1_requested_charge_voltage
                name: Requested Charge Voltage
              - entity: sensor.yambms_smart_bms_1_requested_charge_current
                name: Requested Charge Current
              - entity: sensor.yambms_smart_bms_1_requested_discharge_voltage
                name: Requested Discharge Voltage
              - entity: sensor.yambms_smart_bms_1_requested_discharge_current
                name: Requested Discharge Current
              - entity: binary_sensor.yambms_smart_bms_1_requested_force_charge
                name: Requested Force Charge
          - type: tile
            entity: sensor.yambms_smart_bms_1_running_version
            name: Running version
          - type: tile
            entity: sensor.yambms_smart_bms_1_last_version
            name: Last version
        title: YamBMS - Status
        column_span: 1
  - title: Control
    cards:
      - type: entities
        entities:
          - entity: select.yambms_canbus_1_bms_name
            name: CANBUS 1 BMS Name
          - entity: select.yambms_canbus_1_protocol
            name: CANBUS 1 Protocol
        title: YamBMS - CANBUS Protocol
      - type: entities
        entities:
          - entity: switch.yambms_smart_bms_1_charge_enabled
            name: YamBMS 1 Charge enabled
          - entity: switch.yambms_smart_bms_1_discharge_enabled
            name: YamBMS 1 Discharge enabled
          - entity: binary_sensor.yambms_smart_bms_1_bms_charge_switch_state
            name: YamBMS 1 BMS Charge switch state
          - entity: binary_sensor.yambms_smart_bms_1_bms_discharge_switch_state
            name: YamBMS 1 BMS Discharge switch state
        title: YamBMS - Charge / Discharge switch
      - type: entities
        entities:
          - entity: switch.yambms_smart_bms_1_automatic_charge_voltage
            name: Automatic Charge Voltage
          - entity: number.yambms_smart_bms_1_auto_cvl_boost_charge_v
            name: Auto CVL Boost Charge V.
        title: YamBMS - Auto CVL
      - type: entities
        entities:
          - entity: sensor.yambms_smart_bms_1_charging_status
            name: Charging Status
          - entity: sensor.yambms_smart_bms_1_charging_instruction
            name: Charging Instruction
          - entity: switch.yambms_smart_bms_1_float_charge_enabled
            name: Float charge enabled
          - entity: switch.yambms_smart_bms_1_eoc_timer_enabled
            name: EOC timer enabled
          - entity: number.yambms_smart_bms_1_bulk_voltage
            name: Bulk voltage
          - entity: number.yambms_smart_bms_1_float_voltage
            name: Float voltage
          - entity: number.yambms_smart_bms_1_inverter_offset_v
            name: Inverter Offset V.
        title: YamBMS - Charging Settings
      - type: entities
        entities:
          - entity: switch.yambms_smart_bms_1_automatic_charge_current
            name: Automatic Charge Current
          - entity: switch.yambms_smart_bms_1_automatic_discharge_current
            name: Automatic Discharge Current
        title: YamBMS - Auto CCL / DCL
      - type: entities
        entities:
          - entity: number.yambms_smart_bms_1_rebulk_soc
            name: Rebulk SoC
          - entity: number.yambms_smart_bms_1_rebulk_v
            name: Rebulk V.
          - entity: switch.yambms_smart_bms_1_force_bulk_top_bal
            name: Force Bulk (top bal)
        title: YamBMS - ReBulk
      - type: entities
        entities:
          - entity: number.yambms_smart_bms_1_max_charge_current
            name: Max charge current (%)
          - entity: number.yambms_smart_bms_1_max_discharge_current
            name: Max discharge current (%)
        title: YamBMS - Max current (%)
      - type: entities
        entities:
          - entity: switch.yambms_smart_bms_1_request_force_charge
            name: Request force charge
          - entity: number.yambms_smart_bms_1_request_force_charge_start_soc
            name: Force charge Start SoC
          - entity: number.yambms_smart_bms_1_request_force_charge_stop_soc
            name: Force charge Stop SoC
          - entity: binary_sensor.yambms_smart_bms_1_requested_force_charge
            name: Requested Force Charge
        title: YamBMS - Request force charge
      - type: entities
        entities:
          - entity: sensor.yambms_smart_bms_1_requested_charge_voltage
            name: Requested Charge Voltage
          - entity: sensor.yambms_smart_bms_1_requested_discharge_voltage
            name: Requested Discharge Voltage
          - entity: sensor.yambms_smart_bms_1_requested_charge_current
            name: Requested Charge Current
          - entity: sensor.yambms_smart_bms_1_requested_discharge_current
            name: Requested Discharge Current
        title: YamBMS - Requested Values
      - type: entities
        entities:
          - entity: sensor.yambms_smart_bms_1_last_complete_charge
            name: Last Complete Charge
          - entity: binary_sensor.yambms_esp32_online_status
            name: ESP32 Online Status
          - entity: sensor.yambms_esp32_uptime
            name: ESP32 Uptime
          - entity: sensor.yambms_esp32_esphome_version
            name: ESP32 ESPHome version
          - entity: button.yambms_esp32_restart
            name: ESP32 Restart
        title: YamBMS - Diagnostic
      - type: entities
        entities:
          - entity: binary_sensor.yambms_canbus_1_status
            name: CANBUS 1 Status
          - entity: switch.yambms_canbus_1_inverter_heartbeat_monitoring
            name: CANBUS 1 Inverter Heartbeat Monitoring
          - entity: sensor.yambms_canbus_1_inverter_heartbeat
            name: CANBUS 1 Inverter Heartbeat
        title: YamBMS - Inverter Heartbeat
      - type: entities
        entities:
          - entity: sensor.yambms_debug_heap_free
            name: Debug Heap free (%)
          - entity: sensor.yambms_debug_heap_free_2
            name: Debug Heap free
          - entity: sensor.yambms_debug_heap_max_block
            name: Debug Heap max block (%)
          - entity: sensor.yambms_debug_heap_max_block_2
            name: Debug Heap max block
          - entity: sensor.yambms_debug_loop_time
            name: Debug Loop time
          - entity: sensor.yambms_debug_reset_reason
            name: Debug Reset reason
        title: YamBMS - DEBUG
  - title: BMS
    type: sections
    max_columns: 3
    sections:
      - type: grid
        title: BMS 1
        column_span: 1
        cards:
          - type: grid
            square: false
            columns: 1
            cards:
              - type: markdown
                content: >-
                  <center>Time : <b><font color=red>{{
                  states('sensor.yambms_jk_bms_1_total_runtime_formatted') |
                  upper }}</font>
            layout_options:
              grid_columns: 2
              grid_rows: 1
          - type: grid
            square: false
            columns: 1
            cards:
              - type: markdown
                content: >-
                  <center>Error : <b><font color=red>{{
                  states('sensor.yambms_jk_bms_1_errors')}}</font>
            layout_options:
              grid_columns: 2
              grid_rows: 1
          - type: grid
            square: false
            columns: 3
            cards:
              - type: markdown
                content: >-
                  <center>Charge : <b>{% if
                  states('binary_sensor.yambms_jk_bms_1_status_charging') ==
                  'on' %} <font color=#41CD52>{{
                  states('binary_sensor.yambms_jk_bms_1_status_charging') |
                  upper }}</font> {% else %} <font color=#3090C7>{{
                  states('binary_sensor.yambms_jk_bms_1_status_charging') |
                  upper }}</font> {% endif %}
              - type: markdown
                content: >-
                  <center>Discharge : <b> {% if
                  states('binary_sensor.yambms_jk_bms_1_status_discharging') ==
                  'on' %} <font color=#41CD52>{{
                  states('binary_sensor.yambms_jk_bms_1_status_discharging') |
                  upper }}</font> {% else %} <font color=#3090C7>{{
                  states('binary_sensor.yambms_jk_bms_1_status_discharging') |
                  upper }}</font> {% endif %}
              - type: markdown
                content: >-
                  <center>Balance : <b> {% if
                  states('binary_sensor.yambms_jk_bms_1_status_balancing') ==
                  'on' %} <font color=#41CD52>{{
                  states('binary_sensor.yambms_jk_bms_1_status_balancing') |
                  upper }}</font> {% else %} <font color=#3090C7>{{
                  states('binary_sensor.yambms_jk_bms_1_status_balancing') |
                  upper }}</font> {% endif %}
          - type: grid
            square: false
            columns: 2
            cards:
              - type: markdown
                content: >-
                  <center><b><font color=#41CD52 size=6>{{
                  states('sensor.yambms_jk_bms_1_battery_voltage') }}
                  V</font></b><br> Battery Power :&nbsp;&nbsp;<font
                  color=#41CD52>{{
                  states('sensor.yambms_jk_bms_1_battery_power') }} W</font><br>
                  Battery Capacity :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('number.yambms_jk_bms_1_battery_capacity_total_setting')
                  }} Ah</font><br> Cycle Capacity :&nbsp;&nbsp;<font
                  color=#41CD52>{{
                  states('sensor.yambms_jk_bms_1_battery_capacity_total_charging_cycle')
                  }} Ah</font><br> Ave. Cell Vol. :&nbsp;&nbsp;<font
                  color=#41CD52>{{
                  states('sensor.yambms_jk_bms_1_cell_average_voltage') }}
                  V</font><br> Balance Cur. :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('sensor.yambms_jk_bms_1_balancing_current') }}
                  A</font><br> Battery T1 :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('sensor.yambms_jk_bms_1_temperature_sensor_1') }}
                  Â°C</font>
              - type: markdown
                content: >-
                  <center><b><font color=#41CD52 size=6>{{
                  states('sensor.yambms_jk_bms_1_battery_current') }}
                  A</font></b><br> Remain Battery :&nbsp;&nbsp;<font
                  color=#41CD52>{{
                  states('sensor.yambms_jk_bms_1_battery_capacity_state_of_charge')
                  }} %</font><br> Remain Capacity :&nbsp;&nbsp;<font
                  color=#41CD52>{{
                  states('sensor.yambms_jk_bms_1_battery_capacity_remaining') }}
                  Ah</font><br> Cycle Count :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('sensor.yambms_jk_bms_1_charging_cycles') }}</font><br>
                  Delta Cell Vol. :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('sensor.yambms_jk_bms_1_cell_delta_voltage') }}
                  V</font><br> MOS Temp. :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('sensor.yambms_jk_bms_1_temperature_powertube') }}
                  Â°C</font><br> Battery T2 :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('sensor.yambms_jk_bms_1_temperature_sensor_2') }}
                  Â°C</font>
          - type: grid
            square: false
            columns: 1
            cards:
              - type: markdown
                content: <center><b>Cells Voltage / Wire Resistance
          - type: grid
            square: false
            columns: 2
            cards:
              - type: markdown
                content: >-
                  <center>01.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_1_max_voltage_cell') == '1' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_1_cell_voltage_01') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_1_min_voltage_cell') ==
                  '1' %}  <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_1_cell_voltage_01') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_1_cell_voltage_01')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_1_cell_resistance_01') }} Î© <br>
                  02.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_1_max_voltage_cell') == '2' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_1_cell_voltage_02') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_1_min_voltage_cell') ==
                  '2' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_1_cell_voltage_02') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_1_cell_voltage_02')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_1_cell_resistance_02') }} Î© <br>
                  03.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_1_max_voltage_cell') == '3' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_1_cell_voltage_03') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_1_min_voltage_cell') ==
                  '3' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_1_cell_voltage_03') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_1_cell_voltage_03')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_1_cell_resistance_03') }} Î© <br>
                  04.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_1_max_voltage_cell') == '4' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_1_cell_voltage_04') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_1_min_voltage_cell') ==
                  '4' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_1_cell_voltage_04') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_1_cell_voltage_04')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_1_cell_resistance_04') }} Î© <br>
                  05.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_1_max_voltage_cell') == '5' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_1_cell_voltage_05') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_1_min_voltage_cell') ==
                  '5' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_1_cell_voltage_05') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_1_cell_voltage_05')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_1_cell_resistance_05') }} Î© <br>
                  06.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_1_max_voltage_cell') == '6' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_1_cell_voltage_06') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_1_min_voltage_cell') ==
                  '6' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_1_cell_voltage_06') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_1_cell_voltage_06')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_1_cell_resistance_06') }} Î© <br>
                  07.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_1_max_voltage_cell') == '7' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_1_cell_voltage_07') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_1_min_voltage_cell') ==
                  '7' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_1_cell_voltage_07') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_1_cell_voltage_07')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_1_cell_resistance_07') }} Î© <br>
                  08.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_1_max_voltage_cell') == '8' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_1_cell_voltage_08') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_1_min_voltage_cell') ==
                  '8' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_1_cell_voltage_08') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_1_cell_voltage_08')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_1_cell_resistance_08') }} Î©
                  <br></center>
              - type: markdown
                content: >-
                  <center>09.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_1_max_voltage_cell') == '9' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_1_cell_voltage_09') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_1_min_voltage_cell') ==
                  '9' %}  <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_1_cell_voltage_09') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_1_cell_voltage_09')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_1_cell_resistance_09') }} Î© <br>
                  10.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_1_max_voltage_cell') == '10' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_1_cell_voltage_10') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_1_min_voltage_cell') ==
                  '10' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_1_cell_voltage_10') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_1_cell_voltage_10')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_1_cell_resistance_10') }} Î© <br>
                  11.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_1_max_voltage_cell') == '11' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_1_cell_voltage_11') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_1_min_voltage_cell') ==
                  '11' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_1_cell_voltage_11') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_1_cell_voltage_11')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_1_cell_resistance_11') }} Î© <br>
                  12.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_1_max_voltage_cell') == '12' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_1_cell_voltage_12') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_1_min_voltage_cell') ==
                  '12' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_1_cell_voltage_12') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_1_cell_voltage_12')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_1_cell_resistance_12') }} Î© <br>
                  13.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_1_max_voltage_cell') == '13' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_1_cell_voltage_13') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_1_min_voltage_cell') ==
                  '13' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_1_cell_voltage_13') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_1_cell_voltage_13')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_1_cell_resistance_13') }} Î© <br>
                  14.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_1_max_voltage_cell') == '14' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_1_cell_voltage_14') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_1_min_voltage_cell') ==
                  '14' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_1_cell_voltage_14') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_1_cell_voltage_14')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_1_cell_resistance_14') }} Î© <br>
                  15.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_1_max_voltage_cell') == '15' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_1_cell_voltage_15') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_1_min_voltage_cell') ==
                  '15' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_1_cell_voltage_15') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_1_cell_voltage_15')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_1_cell_resistance_15') }} Î© <br>
                  16.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_1_max_voltage_cell') == '16' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_1_cell_voltage_16') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_1_min_voltage_cell') ==
                  '16' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_1_cell_voltage_16') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_1_cell_voltage_16')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_1_cell_resistance_16') }} Î©
                  <br></center>
          - type: entities
            entities:
              - entity: switch.yambms_jk_bms_1_combine_enabled
                name: Combine
              - entity: binary_sensor.yambms_jk_bms_1_combine_availability
                name: Cb. Availability
              - entity: binary_sensor.yambms_jk_bms_1_can_be_combined
                name: Can be combined
            layout_options:
              grid_columns: 2
              grid_rows: 3
          - type: entity-filter
            entities:
              - entity: switch.yambms_jk_bms_1_charging
                name: Charge
              - entity: switch.yambms_jk_bms_1_discharging
                name: Discharge
              - entity: switch.yambms_jk_bms_1_balancing
                name: Balance
            conditions:
              - condition: state
                state_not: unavailable
            layout_options:
              grid_columns: 2
              grid_rows: 3
      - type: grid
        title: BMS 2
        column_span: 1
        cards:
          - type: grid
            square: false
            columns: 1
            cards:
              - type: markdown
                content: >-
                  <center>Time : <b><font color=red>{{
                  states('sensor.yambms_jk_bms_2_total_runtime_formatted') |
                  upper }}</font>
            layout_options:
              grid_columns: 2
              grid_rows: 1
          - type: grid
            square: false
            columns: 1
            cards:
              - type: markdown
                content: >-
                  <center>Error : <b><font color=red>{{
                  states('sensor.yambms_jk_bms_2_errors')}}</font>
            layout_options:
              grid_columns: 2
              grid_rows: 1
          - type: grid
            square: false
            columns: 3
            cards:
              - type: markdown
                content: >-
                  <center>Charge : <b>{% if
                  states('binary_sensor.yambms_jk_bms_2_status_charging') ==
                  'on' %} <font color=#41CD52>{{
                  states('binary_sensor.yambms_jk_bms_2_status_charging') |
                  upper }}</font> {% else %} <font color=#3090C7>{{
                  states('binary_sensor.yambms_jk_bms_2_status_charging') |
                  upper }}</font> {% endif %}
              - type: markdown
                content: >-
                  <center>Discharge : <b> {% if
                  states('binary_sensor.yambms_jk_bms_2_status_discharging') ==
                  'on' %} <font color=#41CD52>{{
                  states('binary_sensor.yambms_jk_bms_2_status_discharging') |
                  upper }}</font> {% else %} <font color=#3090C7>{{
                  states('binary_sensor.yambms_jk_bms_2_status_discharging') |
                  upper }}</font> {% endif %}
              - type: markdown
                content: >-
                  <center>Balance : <b> {% if
                  states('binary_sensor.yambms_jk_bms_2_status_balancing') ==
                  'on' %} <font color=#41CD52>{{
                  states('binary_sensor.yambms_jk_bms_2_status_balancing') |
                  upper }}</font> {% else %} <font color=#3090C7>{{
                  states('binary_sensor.yambms_jk_bms_2_status_balancing') |
                  upper }}</font> {% endif %}
          - type: grid
            square: false
            columns: 2
            cards:
              - type: markdown
                content: >-
                  <center><b><font color=#41CD52 size=6>{{
                  states('sensor.yambms_jk_bms_2_battery_voltage') }}
                  V</font></b><br> Battery Power :&nbsp;&nbsp;<font
                  color=#41CD52>{{
                  states('sensor.yambms_jk_bms_2_battery_power') }} W</font><br>
                  Battery Capacity :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('number.yambms_jk_bms_2_battery_capacity_total_setting')
                  }} Ah</font><br> Cycle Capacity :&nbsp;&nbsp;<font
                  color=#41CD52>{{
                  states('sensor.yambms_jk_bms_2_battery_capacity_total_charging_cycle')
                  }} Ah</font><br> Ave. Cell Vol. :&nbsp;&nbsp;<font
                  color=#41CD52>{{
                  states('sensor.yambms_jk_bms_2_cell_average_voltage') }}
                  V</font><br> Balance Cur. :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('sensor.yambms_jk_bms_2_balancing_current') }}
                  A</font><br> Battery T1 :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('sensor.yambms_jk_bms_2_temperature_sensor_1') }}
                  Â°C</font>
              - type: markdown
                content: >-
                  <center><b><font color=#41CD52 size=6>{{
                  states('sensor.yambms_jk_bms_2_battery_current') }}
                  A</font></b><br> Remain Battery :&nbsp;&nbsp;<font
                  color=#41CD52>{{
                  states('sensor.yambms_jk_bms_2_battery_capacity_state_of_charge')
                  }} %</font><br> Remain Capacity :&nbsp;&nbsp;<font
                  color=#41CD52>{{
                  states('sensor.yambms_jk_bms_2_battery_capacity_remaining') }}
                  Ah</font><br> Cycle Count :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('sensor.yambms_jk_bms_2_charging_cycles') }}</font><br>
                  Delta Cell Vol. :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('sensor.yambms_jk_bms_2_cell_delta_voltage') }}
                  V</font><br> MOS Temp. :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('sensor.yambms_jk_bms_2_temperature_powertube') }}
                  Â°C</font><br> Battery T2 :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('sensor.yambms_jk_bms_2_temperature_sensor_2') }}
                  Â°C</font>
          - type: grid
            square: false
            columns: 1
            cards:
              - type: markdown
                content: <center><b>Cells Voltage / Wire Resistance
          - type: grid
            square: false
            columns: 2
            cards:
              - type: markdown
                content: >-
                  <center>01.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_2_max_voltage_cell') == '1' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_2_cell_voltage_01') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_2_min_voltage_cell') ==
                  '1' %}  <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_2_cell_voltage_01') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_2_cell_voltage_01')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_2_cell_resistance_01') }} Î© <br>
                  02.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_2_max_voltage_cell') == '2' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_2_cell_voltage_02') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_2_min_voltage_cell') ==
                  '2' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_2_cell_voltage_02') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_2_cell_voltage_02')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_2_cell_resistance_02') }} Î© <br>
                  03.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_2_max_voltage_cell') == '3' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_2_cell_voltage_03') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_2_min_voltage_cell') ==
                  '3' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_2_cell_voltage_03') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_2_cell_voltage_03')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_2_cell_resistance_03') }} Î© <br>
                  04.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_2_max_voltage_cell') == '4' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_2_cell_voltage_04') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_2_min_voltage_cell') ==
                  '4' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_2_cell_voltage_04') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_2_cell_voltage_04')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_2_cell_resistance_04') }} Î© <br>
                  05.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_2_max_voltage_cell') == '5' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_2_cell_voltage_05') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_2_min_voltage_cell') ==
                  '5' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_2_cell_voltage_05') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_2_cell_voltage_05')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_2_cell_resistance_05') }} Î© <br>
                  06.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_2_max_voltage_cell') == '6' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_2_cell_voltage_06') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_2_min_voltage_cell') ==
                  '6' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_2_cell_voltage_06') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_2_cell_voltage_06')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_2_cell_resistance_06') }} Î© <br>
                  07.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_2_max_voltage_cell') == '7' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_2_cell_voltage_07') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_2_min_voltage_cell') ==
                  '7' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_2_cell_voltage_07') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_2_cell_voltage_07')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_2_cell_resistance_07') }} Î© <br>
                  08.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_2_max_voltage_cell') == '8' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_2_cell_voltage_08') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_2_min_voltage_cell') ==
                  '8' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_2_cell_voltage_08') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_2_cell_voltage_08')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_2_cell_resistance_08') }} Î©
                  <br></center>
              - type: markdown
                content: >-
                  <center>09.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_2_max_voltage_cell') == '9' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_2_cell_voltage_09') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_2_min_voltage_cell') ==
                  '9' %}  <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_2_cell_voltage_09') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_2_cell_voltage_09')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_2_cell_resistance_09') }} Î© <br>
                  10.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_2_max_voltage_cell') == '10' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_2_cell_voltage_10') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_2_min_voltage_cell') ==
                  '10' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_2_cell_voltage_10') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_2_cell_voltage_10')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_2_cell_resistance_10') }} Î© <br>
                  11.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_2_max_voltage_cell') == '11' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_2_cell_voltage_11') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_2_min_voltage_cell') ==
                  '11' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_2_cell_voltage_11') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_2_cell_voltage_11')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_2_cell_resistance_11') }} Î© <br>
                  12.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_2_max_voltage_cell') == '12' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_2_cell_voltage_12') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_2_min_voltage_cell') ==
                  '12' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_2_cell_voltage_12') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_2_cell_voltage_12')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_2_cell_resistance_12') }} Î© <br>
                  13.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_2_max_voltage_cell') == '13' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_2_cell_voltage_13') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_2_min_voltage_cell') ==
                  '13' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_2_cell_voltage_13') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_2_cell_voltage_13')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_2_cell_resistance_13') }} Î© <br>
                  14.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_2_max_voltage_cell') == '14' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_2_cell_voltage_14') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_2_min_voltage_cell') ==
                  '14' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_2_cell_voltage_14') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_2_cell_voltage_14')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_2_cell_resistance_14') }} Î© <br>
                  15.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_2_max_voltage_cell') == '15' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_2_cell_voltage_15') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_2_min_voltage_cell') ==
                  '15' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_2_cell_voltage_15') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_2_cell_voltage_15')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_2_cell_resistance_15') }} Î© <br>
                  16.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_2_max_voltage_cell') == '16' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_2_cell_voltage_16') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_2_min_voltage_cell') ==
                  '16' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_2_cell_voltage_16') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_2_cell_voltage_16')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_2_cell_resistance_16') }} Î©
                  <br></center>
          - type: entities
            entities:
              - entity: switch.yambms_jk_bms_2_combine_enabled
                name: Combine
              - entity: binary_sensor.yambms_jk_bms_2_combine_availability
                name: Cb. Availability
              - entity: binary_sensor.yambms_jk_bms_2_can_be_combined
                name: Can be combined
            layout_options:
              grid_columns: 2
              grid_rows: 3
          - type: entity-filter
            entities:
              - entity: switch.yambms_jk_bms_2_charging
                name: Charge
              - entity: switch.yambms_jk_bms_2_discharging
                name: Discharge
              - entity: switch.yambms_jk_bms_2_balancing
                name: Balance
            conditions:
              - condition: state
                state_not: unavailable
            layout_options:
              grid_columns: 2
              grid_rows: 3
      - type: grid
        title: BMS 3
        column_span: 1
        cards:
          - type: grid
            square: false
            columns: 1
            cards:
              - type: markdown
                content: >-
                  <center>Time : <b><font color=red>{{
                  states('sensor.yambms_jk_bms_3_total_runtime_formatted') |
                  upper }}</font>
            layout_options:
              grid_columns: 2
              grid_rows: 1
          - type: grid
            square: false
            columns: 1
            cards:
              - type: markdown
                content: >-
                  <center>Error : <b><font color=red>{{
                  states('sensor.yambms_jk_bms_3_errors')}}</font>
            layout_options:
              grid_columns: 2
              grid_rows: 1
          - type: grid
            square: false
            columns: 3
            cards:
              - type: markdown
                content: >-
                  <center>Charge : <b>{% if
                  states('binary_sensor.yambms_jk_bms_3_status_charging') ==
                  'on' %} <font color=#41CD52>{{
                  states('binary_sensor.yambms_jk_bms_3_status_charging') |
                  upper }}</font> {% else %} <font color=#3090C7>{{
                  states('binary_sensor.yambms_jk_bms_3_status_charging') |
                  upper }}</font> {% endif %}
              - type: markdown
                content: >-
                  <center>Discharge : <b> {% if
                  states('binary_sensor.yambms_jk_bms_3_status_discharging') ==
                  'on' %} <font color=#41CD52>{{
                  states('binary_sensor.yambms_jk_bms_3_status_discharging') |
                  upper }}</font> {% else %} <font color=#3090C7>{{
                  states('binary_sensor.yambms_jk_bms_3_status_discharging') |
                  upper }}</font> {% endif %}
              - type: markdown
                content: >-
                  <center>Balance : <b> {% if
                  states('binary_sensor.yambms_jk_bms_3_status_balancing') ==
                  'on' %} <font color=#41CD52>{{
                  states('binary_sensor.yambms_jk_bms_3_status_balancing') |
                  upper }}</font> {% else %} <font color=#3090C7>{{
                  states('binary_sensor.yambms_jk_bms_3_status_balancing') |
                  upper }}</font> {% endif %}
          - type: grid
            square: false
            columns: 2
            cards:
              - type: markdown
                content: >-
                  <center><b><font color=#41CD52 size=6>{{
                  states('sensor.yambms_jk_bms_3_battery_voltage') }}
                  V</font></b><br> Battery Power :&nbsp;&nbsp;<font
                  color=#41CD52>{{
                  states('sensor.yambms_jk_bms_3_battery_power') }} W</font><br>
                  Battery Capacity :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('number.yambms_jk_bms_3_battery_capacity_total_setting')
                  }} Ah</font><br> Cycle Capacity :&nbsp;&nbsp;<font
                  color=#41CD52>{{
                  states('sensor.yambms_jk_bms_3_battery_capacity_total_charging_cycle')
                  }} Ah</font><br> Ave. Cell Vol. :&nbsp;&nbsp;<font
                  color=#41CD52>{{
                  states('sensor.yambms_jk_bms_3_cell_average_voltage') }}
                  V</font><br> Balance Cur. :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('sensor.yambms_jk_bms_3_balancing_current') }}
                  A</font><br> Battery T1 :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('sensor.yambms_jk_bms_3_temperature_sensor_1') }}
                  Â°C</font>
              - type: markdown
                content: >-
                  <center><b><font color=#41CD52 size=6>{{
                  states('sensor.yambms_jk_bms_3_battery_current') }}
                  A</font></b><br> Remain Battery :&nbsp;&nbsp;<font
                  color=#41CD52>{{
                  states('sensor.yambms_jk_bms_3_battery_capacity_state_of_charge')
                  }} %</font><br> Remain Capacity :&nbsp;&nbsp;<font
                  color=#41CD52>{{
                  states('sensor.yambms_jk_bms_3_battery_capacity_remaining') }}
                  Ah</font><br> Cycle Count :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('sensor.yambms_jk_bms_3_charging_cycles') }}</font><br>
                  Delta Cell Vol. :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('sensor.yambms_jk_bms_3_cell_delta_voltage') }}
                  V</font><br> MOS Temp. :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('sensor.yambms_jk_bms_3_temperature_powertube') }}
                  Â°C</font><br> Battery T2 :&nbsp;&nbsp;<font color=#41CD52>{{
                  states('sensor.yambms_jk_bms_3_temperature_sensor_2') }}
                  Â°C</font>
          - type: grid
            square: false
            columns: 1
            cards:
              - type: markdown
                content: <center><b>Cells Voltage / Wire Resistance
          - type: grid
            square: false
            columns: 2
            cards:
              - type: markdown
                content: >-
                  <center>01.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_3_max_voltage_cell') == '1' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_3_cell_voltage_01') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_3_min_voltage_cell') ==
                  '1' %}  <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_3_cell_voltage_01') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_3_cell_voltage_01')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_3_cell_resistance_01') }} Î© <br>
                  02.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_3_max_voltage_cell') == '2' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_3_cell_voltage_02') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_3_min_voltage_cell') ==
                  '2' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_3_cell_voltage_02') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_3_cell_voltage_02')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_3_cell_resistance_02') }} Î© <br>
                  03.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_3_max_voltage_cell') == '3' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_3_cell_voltage_03') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_3_min_voltage_cell') ==
                  '3' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_3_cell_voltage_03') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_3_cell_voltage_03')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_3_cell_resistance_03') }} Î© <br>
                  04.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_3_max_voltage_cell') == '4' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_3_cell_voltage_04') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_3_min_voltage_cell') ==
                  '4' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_3_cell_voltage_04') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_3_cell_voltage_04')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_3_cell_resistance_04') }} Î© <br>
                  05.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_3_max_voltage_cell') == '5' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_3_cell_voltage_05') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_3_min_voltage_cell') ==
                  '5' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_3_cell_voltage_05') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_3_cell_voltage_05')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_3_cell_resistance_05') }} Î© <br>
                  06.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_3_max_voltage_cell') == '6' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_3_cell_voltage_06') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_3_min_voltage_cell') ==
                  '6' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_3_cell_voltage_06') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_3_cell_voltage_06')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_3_cell_resistance_06') }} Î© <br>
                  07.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_3_max_voltage_cell') == '7' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_3_cell_voltage_07') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_3_min_voltage_cell') ==
                  '7' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_3_cell_voltage_07') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_3_cell_voltage_07')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_3_cell_resistance_07') }} Î© <br>
                  08.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_3_max_voltage_cell') == '8' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_3_cell_voltage_08') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_3_min_voltage_cell') ==
                  '8' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_3_cell_voltage_08') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_3_cell_voltage_08')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_3_cell_resistance_08') }} Î©
                  <br></center>
              - type: markdown
                content: >-
                  <center>09.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_3_max_voltage_cell') == '9' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_3_cell_voltage_09') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_3_min_voltage_cell') ==
                  '9' %}  <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_3_cell_voltage_09') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_3_cell_voltage_09')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_3_cell_resistance_09') }} Î© <br>
                  10.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_3_max_voltage_cell') == '10' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_3_cell_voltage_10') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_3_min_voltage_cell') ==
                  '10' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_3_cell_voltage_10') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_3_cell_voltage_10')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_3_cell_resistance_10') }} Î© <br>
                  11.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_3_max_voltage_cell') == '11' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_3_cell_voltage_11') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_3_min_voltage_cell') ==
                  '11' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_3_cell_voltage_11') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_3_cell_voltage_11')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_3_cell_resistance_11') }} Î© <br>
                  12.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_3_max_voltage_cell') == '12' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_3_cell_voltage_12') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_3_min_voltage_cell') ==
                  '12' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_3_cell_voltage_12') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_3_cell_voltage_12')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_3_cell_resistance_12') }} Î© <br>
                  13.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_3_max_voltage_cell') == '13' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_3_cell_voltage_13') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_3_min_voltage_cell') ==
                  '13' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_3_cell_voltage_13') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_3_cell_voltage_13')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_3_cell_resistance_13') }} Î© <br>
                  14.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_3_max_voltage_cell') == '14' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_3_cell_voltage_14') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_3_min_voltage_cell') ==
                  '14' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_3_cell_voltage_14') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_3_cell_voltage_14')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_3_cell_resistance_14') }} Î© <br>
                  15.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_3_max_voltage_cell') == '15' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_3_cell_voltage_15') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_3_min_voltage_cell') ==
                  '15' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_3_cell_voltage_15') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_3_cell_voltage_15')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_3_cell_resistance_15') }} Î© <br>
                  16.&nbsp;&nbsp;&nbsp; {% if
                  states('sensor.yambms_jk_bms_3_max_voltage_cell') == '16' %} 
                  <font color="red">{{
                  states('sensor.yambms_jk_bms_3_cell_voltage_16') }} V</font>
                  {% elif states('sensor.yambms_jk_bms_3_min_voltage_cell') ==
                  '16' %} <font color="#3090C7">{{
                  states('sensor.yambms_jk_bms_3_cell_voltage_16') }} V</font>
                  {% else %} {{ states('sensor.yambms_jk_bms_3_cell_voltage_16')
                  }} V {% endif %} &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp; {{
                  states('sensor.yambms_jk_bms_3_cell_resistance_16') }} Î©
                  <br></center>
          - type: entities
            entities:
              - entity: switch.yambms_jk_bms_3_combine_enabled
                name: Combine
              - entity: binary_sensor.yambms_jk_bms_3_combine_availability
                name: Cb. Availability
              - entity: binary_sensor.yambms_jk_bms_3_can_be_combined
                name: Can be combined
            layout_options:
              grid_columns: 2
              grid_rows: 3
          - type: entity-filter
            entities:
              - entity: switch.yambms_jk_bms_3_charging
                name: Charge
              - entity: switch.yambms_jk_bms_3_discharging
                name: Discharge
              - entity: switch.yambms_jk_bms_3_balancing
                name: Balance
            conditions:
              - condition: state
                state_not: unavailable
            layout_options:
              grid_columns: 2
              grid_rows: 3
  - title: Shunt
    type: sections
    max_columns: 3
    sections:
      - type: grid
        cards:
          - graph: line
            type: sensor
            entity: sensor.yambms_shunt_1_voltage
            detail: 2
            layout_options:
              grid_columns: 2
              grid_rows: 2
            name: Voltage
            hours_to_show: 8
          - graph: line
            type: sensor
            entity: sensor.yambms_shunt_1_soc
            detail: 2
            name: SoC
            hours_to_show: 8
          - type: gauge
            entity: sensor.yambms_shunt_1_current
            needle: true
            severity:
              green: 0
              yellow: -250
              red: -500
            max: 500
            min: -500
            name: Current
            layout_options:
              grid_columns: 2
              grid_rows: 3
          - type: gauge
            entity: sensor.yambms_shunt_1_power
            needle: true
            severity:
              green: 0
              yellow: -2500
              red: -5000
            max: 5000
            min: -5000
            name: Power
            layout_options:
              grid_columns: 2
              grid_rows: 3
          - type: entity-filter
            entities:
              - entity: sensor.yambms_shunt_1_voltage
                name: Shunt 1 Voltage
              - entity: sensor.yambms_shunt_1_current
                name: Shunt 1 Current
              - entity: sensor.yambms_shunt_1_power
                name: Shunt 1 Power
              - entity: sensor.yambms_shunt_1_soc
                name: Shunt 1 SoC
              - entity: sensor.yambms_shunt_1_temperature
                name: Shunt 1 Temperature
              - entity: sensor.yambms_shunt_1_charged_power
                name: Shunt 1 Charged Power
              - entity: sensor.yambms_shunt_1_discharged_power
                name: Shunt 1 Discharged Power
              - entity: sensor.yambms_shunt_1_battery_capacity
                name: Shunt 1 Battery Capacity
            conditions:
              - condition: state
                state_not: unavailable
          - type: entities
            entities:
              - entity: switch.yambms_shunt_1_combine_enabled
                name: Shunt 1 Combine enabled
              - entity: binary_sensor.yambms_shunt_1_combine_availability
                name: Shunt 1 Combine Availability
              - entity: binary_sensor.yambms_shunt_1_can_be_combined
                name: Shunt 1 Can be combined
        title: Shunt 1
        column_span: 1
